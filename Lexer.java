// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexer.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int PARSE_STRING = 2;
  public static final int ESCAPE_SEQUENCE = 4;
  public static final int BLK_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\1\1\3\22\0"+
    "\1\1\1\5\1\6\1\7\1\0\1\10\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\2\22\10\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\6\33\24\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\0\1\42\1\43\1\44\1\45\1\46\1\47\1\34"+
    "\1\50\1\51\2\34\1\52\1\34\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\34\1\64"+
    "\1\34\1\65\1\66\1\67\1\70\1\71\6\0\1\4"+
    "\u01a2\0\2\4\326\0\u0100\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\3\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\13\14\1\17\1\20\1\21\2\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\25\1\26\1\30\22\0"+
    "\1\31\1\32\1\33\3\0\1\34\1\35\1\0\1\36"+
    "\1\37\6\14\1\40\2\14\1\41\5\14\1\42\1\43"+
    "\1\0\1\44\1\45\1\46\1\47\1\50\1\51\1\0"+
    "\1\52\1\0\1\53\1\54\1\0\1\55\1\56\1\57"+
    "\1\60\1\0\1\61\1\0\1\62\1\14\1\63\1\64"+
    "\1\65\1\66\4\14\1\67\6\14\1\70\1\71\1\72"+
    "\1\73\1\0\1\74\1\14\1\75\1\76\1\77\1\14"+
    "\1\100\1\101\1\14\1\102\1\0\1\14\1\103\1\104"+
    "\1\14\1\105\1\106\1\14\1\107\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u0122\0\u015c"+
    "\0\350\0\u0196\0\350\0\350\0\350\0\u01d0\0\u020a\0\u0244"+
    "\0\u027e\0\u02b8\0\350\0\u015c\0\u02f2\0\u032c\0\350\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\350\0\350\0\u05e4\0\u061e\0\u0658\0\350"+
    "\0\350\0\u05e4\0\u05e4\0\350\0\350\0\350\0\u0692\0\u06cc"+
    "\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u015c\0\u0a32"+
    "\0\u0a6c\0\350\0\350\0\350\0\u0aa6\0\u0ae0\0\u0b1a\0\u020a"+
    "\0\u015c\0\u0b54\0\350\0\350\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u02f2\0\u0cea\0\u0d24\0\u02f2\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\350\0\350\0\u0e80\0\350\0\350"+
    "\0\350\0\350\0\350\0\350\0\u0eba\0\350\0\u0ef4\0\350"+
    "\0\350\0\u0f2e\0\350\0\350\0\u0a32\0\350\0\u0f68\0\u0ae0"+
    "\0\u0fa2\0\350\0\u0fdc\0\u02f2\0\u02f2\0\u02f2\0\u02f2\0\u1016"+
    "\0\u1050\0\u108a\0\u10c4\0\u02f2\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\350\0\350\0\350\0\350\0\u125a\0\u02f2"+
    "\0\u1294\0\u02f2\0\u02f2\0\u12ce\0\u1308\0\u02f2\0\u02f2\0\u1342"+
    "\0\u02f2\0\u137c\0\u13b6\0\u02f2\0\u13f0\0\u142a\0\350\0\u02f2"+
    "\0\u1464\0\u02f2\0\u02f2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\0\1\10\1\11\1\12\2\10"+
    "\1\13\1\14\2\10\1\15\1\16\1\17\1\20\2\21"+
    "\1\22\1\23\3\5\1\10\1\24\2\25\1\26\1\5"+
    "\1\27\2\10\1\30\1\25\1\31\1\32\1\33\2\25"+
    "\1\34\1\35\1\36\1\37\1\40\2\25\1\41\1\42"+
    "\4\25\1\43\1\10\1\44\1\10\2\45\1\46\1\47"+
    "\2\45\1\50\27\45\1\51\14\45\1\52\5\45\1\53"+
    "\10\45\36\0\1\54\14\0\1\55\5\0\1\56\10\0"+
    "\14\57\1\60\4\57\1\61\50\57\77\0\1\62\2\0"+
    "\1\63\1\64\2\0\1\65\1\66\1\0\1\67\1\0"+
    "\1\70\2\0\1\71\1\0\1\72\1\73\1\74\36\0"+
    "\1\75\1\0\1\76\5\0\1\77\2\0\2\77\2\0"+
    "\2\77\1\0\1\77\1\0\3\77\5\0\2\77\2\25"+
    "\3\0\2\77\24\25\1\0\1\77\1\0\1\77\43\0"+
    "\1\100\1\101\1\0\1\102\1\103\11\0\1\104\1\105"+
    "\1\0\1\106\12\0\1\77\1\0\1\107\2\77\2\0"+
    "\2\77\1\0\1\77\1\0\1\77\2\21\5\0\2\77"+
    "\2\25\3\0\2\77\24\25\1\0\1\77\1\0\1\77"+
    "\22\0\2\110\53\0\1\77\2\0\2\77\2\0\1\111"+
    "\1\77\1\0\1\77\1\0\1\112\2\77\5\0\2\77"+
    "\2\25\3\0\2\77\24\25\1\0\1\77\1\0\1\77"+
    "\5\0\1\77\2\0\2\77\2\0\2\77\1\0\1\77"+
    "\1\110\1\77\2\21\5\0\2\77\2\25\3\0\2\77"+
    "\24\25\1\0\1\77\1\0\1\77\37\0\1\113\37\0"+
    "\1\25\2\0\2\25\2\0\2\25\1\0\1\25\1\0"+
    "\3\25\5\0\4\25\3\0\26\25\1\0\1\25\1\0"+
    "\1\25\24\0\1\114\52\0\1\25\2\0\2\25\2\0"+
    "\2\25\1\0\1\25\1\0\3\25\5\0\4\25\3\0"+
    "\13\25\1\115\12\25\1\0\1\25\1\0\1\25\5\0"+
    "\1\25\2\0\2\25\2\0\2\25\1\0\1\25\1\0"+
    "\3\25\5\0\4\25\3\0\2\25\1\116\2\25\1\117"+
    "\20\25\1\0\1\25\1\0\1\25\5\0\1\25\2\0"+
    "\2\25\2\0\2\25\1\0\1\25\1\0\3\25\5\0"+
    "\4\25\3\0\6\25\1\120\17\25\1\0\1\25\1\0"+
    "\1\25\5\0\1\25\2\0\2\25\2\0\2\25\1\0"+
    "\1\25\1\0\3\25\5\0\4\25\3\0\12\25\1\121"+
    "\3\25\1\122\7\25\1\0\1\25\1\0\1\25\5\0"+
    "\1\25\2\0\2\25\2\0\2\25\1\0\1\25\1\0"+
    "\3\25\5\0\4\25\3\0\7\25\1\123\16\25\1\0"+
    "\1\25\1\0\1\25\5\0\1\25\2\0\2\25\2\0"+
    "\2\25\1\0\1\25\1\0\3\25\5\0\4\25\3\0"+
    "\11\25\1\124\14\25\1\0\1\25\1\0\1\25\5\0"+
    "\1\25\2\0\2\25\2\0\2\25\1\0\1\25\1\0"+
    "\3\25\5\0\4\25\3\0\14\25\1\125\11\25\1\0"+
    "\1\25\1\0\1\25\5\0\1\25\2\0\2\25\2\0"+
    "\2\25\1\0\1\25\1\0\3\25\5\0\4\25\3\0"+
    "\17\25\1\126\6\25\1\0\1\25\1\0\1\25\5\0"+
    "\1\25\2\0\2\25\2\0\2\25\1\0\1\25\1\0"+
    "\3\25\5\0\4\25\3\0\2\25\1\127\14\25\1\130"+
    "\6\25\1\0\1\25\1\0\1\25\5\0\1\25\2\0"+
    "\2\25\2\0\2\25\1\0\1\25\1\0\3\25\5\0"+
    "\4\25\3\0\11\25\1\131\10\25\1\132\3\25\1\0"+
    "\1\25\1\0\1\25\5\0\1\25\2\0\2\25\2\0"+
    "\2\25\1\0\1\25\1\0\3\25\5\0\4\25\3\0"+
    "\10\25\1\133\15\25\1\0\1\25\1\0\1\25\2\45"+
    "\2\0\2\45\1\0\27\45\1\0\33\45\2\0\1\46"+
    "\70\0\3\47\66\0\14\57\1\0\4\57\1\0\50\57"+
    "\21\0\1\134\64\0\1\135\104\0\1\136\43\0\3\137"+
    "\67\0\3\140\67\0\3\141\67\0\3\142\67\0\3\143"+
    "\67\0\3\144\115\0\1\145\43\0\3\146\23\0\1\147"+
    "\43\0\3\150\67\0\3\151\23\0\1\152\43\0\3\153"+
    "\67\0\3\154\110\0\1\155\102\0\2\156\4\0\25\156"+
    "\26\0\2\157\7\0\1\157\6\0\6\157\44\0\2\160"+
    "\7\0\1\160\6\0\6\160\106\0\1\106\5\0\3\161"+
    "\1\162\1\161\1\112\2\161\2\112\2\161\2\112\1\161"+
    "\1\112\1\161\3\112\5\161\2\112\2\163\3\161\2\112"+
    "\24\163\1\161\1\112\1\161\1\112\5\0\1\25\2\0"+
    "\2\25\2\0\2\25\1\0\1\25\1\0\3\25\5\0"+
    "\4\25\3\0\5\25\1\164\20\25\1\0\1\25\1\0"+
    "\1\25\5\0\1\25\2\0\2\25\2\0\2\25\1\0"+
    "\1\25\1\0\3\25\5\0\4\25\3\0\17\25\1\165"+
    "\6\25\1\0\1\25\1\0\1\25\5\0\1\25\2\0"+
    "\2\25\2\0\2\25\1\0\1\25\1\0\3\25\5\0"+
    "\4\25\3\0\17\25\1\166\6\25\1\0\1\25\1\0"+
    "\1\25\5\0\1\25\2\0\2\25\2\0\2\25\1\0"+
    "\1\25\1\0\3\25\5\0\4\25\3\0\7\25\1\167"+
    "\16\25\1\0\1\25\1\0\1\25\5\0\1\25\2\0"+
    "\2\25\2\0\2\25\1\0\1\25\1\0\3\25\5\0"+
    "\4\25\3\0\20\25\1\170\5\25\1\0\1\25\1\0"+
    "\1\25\5\0\1\25\2\0\2\25\2\0\2\25\1\0"+
    "\1\25\1\0\3\25\5\0\4\25\3\0\22\25\1\171"+
    "\1\172\2\25\1\0\1\25\1\0\1\25\5\0\1\25"+
    "\2\0\2\25\2\0\2\25\1\0\1\25\1\0\3\25"+
    "\5\0\4\25\3\0\20\25\1\173\5\25\1\0\1\25"+
    "\1\0\1\25\5\0\1\25\2\0\2\25\2\0\2\25"+
    "\1\0\1\25\1\0\3\25\5\0\4\25\3\0\21\25"+
    "\1\174\4\25\1\0\1\25\1\0\1\25\5\0\1\25"+
    "\2\0\2\25\2\0\2\25\1\0\1\25\1\0\3\25"+
    "\5\0\4\25\3\0\11\25\1\175\14\25\1\0\1\25"+
    "\1\0\1\25\5\0\1\25\2\0\2\25\2\0\2\25"+
    "\1\0\1\25\1\0\3\25\5\0\4\25\3\0\11\25"+
    "\1\176\2\25\1\177\11\25\1\0\1\25\1\0\1\25"+
    "\5\0\1\25\2\0\2\25\2\0\2\25\1\0\1\25"+
    "\1\0\3\25\5\0\4\25\3\0\25\25\1\200\1\0"+
    "\1\25\1\0\1\25\5\0\1\25\2\0\2\25\2\0"+
    "\2\25\1\0\1\25\1\0\3\25\5\0\4\25\3\0"+
    "\3\25\1\201\22\25\1\0\1\25\1\0\1\25\5\0"+
    "\1\25\2\0\2\25\2\0\2\25\1\0\1\25\1\0"+
    "\3\25\5\0\4\25\3\0\6\25\1\202\17\25\1\0"+
    "\1\25\1\0\1\25\1\0\3\203\67\0\3\204\67\0"+
    "\3\205\67\0\3\206\110\0\2\207\7\0\1\207\6\0"+
    "\6\207\22\0\3\161\1\162\71\161\1\162\1\161\1\163"+
    "\2\161\2\163\2\161\2\163\1\161\1\163\1\161\3\163"+
    "\5\161\4\163\3\161\26\163\1\161\1\163\1\161\1\163"+
    "\5\0\1\25\2\0\2\25\2\0\2\25\1\0\1\25"+
    "\1\0\3\25\5\0\4\25\3\0\6\25\1\210\17\25"+
    "\1\0\1\25\1\0\1\25\5\0\1\25\2\0\2\25"+
    "\2\0\2\25\1\0\1\25\1\0\3\25\5\0\4\25"+
    "\3\0\2\25\1\211\23\25\1\0\1\25\1\0\1\25"+
    "\5\0\1\25\2\0\2\25\2\0\2\25\1\0\1\25"+
    "\1\0\3\25\5\0\1\212\3\25\3\0\26\25\1\0"+
    "\1\25\1\0\1\25\5\0\1\25\2\0\2\25\2\0"+
    "\2\25\1\0\1\25\1\0\3\25\5\0\4\25\3\0"+
    "\21\25\1\213\4\25\1\0\1\25\1\0\1\25\5\0"+
    "\1\25\2\0\2\25\2\0\2\25\1\0\1\25\1\0"+
    "\3\25\5\0\4\25\3\0\17\25\1\214\6\25\1\0"+
    "\1\25\1\0\1\25\5\0\1\25\2\0\2\25\2\0"+
    "\2\25\1\0\1\25\1\0\3\25\5\0\4\25\3\0"+
    "\13\25\1\215\12\25\1\0\1\25\1\0\1\25\5\0"+
    "\1\25\2\0\2\25\2\0\2\25\1\0\1\25\1\0"+
    "\3\25\5\0\4\25\3\0\4\25\1\216\21\25\1\0"+
    "\1\25\1\0\1\25\5\0\1\25\2\0\2\25\2\0"+
    "\2\25\1\0\1\25\1\0\3\25\5\0\4\25\3\0"+
    "\6\25\1\217\17\25\1\0\1\25\1\0\1\25\5\0"+
    "\1\25\2\0\2\25\2\0\2\25\1\0\1\25\1\0"+
    "\3\25\5\0\4\25\3\0\20\25\1\220\5\25\1\0"+
    "\1\25\1\0\1\25\5\0\1\25\2\0\2\25\2\0"+
    "\2\25\1\0\1\25\1\0\3\25\5\0\4\25\3\0"+
    "\13\25\1\221\12\25\1\0\1\25\1\0\1\25\22\0"+
    "\2\222\7\0\1\222\6\0\6\222\27\0\1\25\2\0"+
    "\2\25\2\0\2\25\1\0\1\25\1\0\3\25\5\0"+
    "\4\25\3\0\12\25\1\223\13\25\1\0\1\25\1\0"+
    "\1\25\5\0\1\25\2\0\2\25\2\0\2\25\1\0"+
    "\1\25\1\0\3\25\5\0\1\224\3\25\3\0\26\25"+
    "\1\0\1\25\1\0\1\25\5\0\1\25\2\0\2\25"+
    "\2\0\2\25\1\0\1\25\1\0\3\25\5\0\4\25"+
    "\3\0\21\25\1\225\4\25\1\0\1\25\1\0\1\25"+
    "\5\0\1\25\2\0\2\25\2\0\2\25\1\0\1\25"+
    "\1\0\3\25\5\0\4\25\3\0\21\25\1\226\4\25"+
    "\1\0\1\25\1\0\1\25\22\0\2\227\7\0\1\227"+
    "\6\0\6\227\27\0\1\25\2\0\2\25\2\0\2\25"+
    "\1\0\1\25\1\0\3\25\5\0\1\230\3\25\3\0"+
    "\26\25\1\0\1\25\1\0\1\25\5\0\1\25\2\0"+
    "\2\25\2\0\2\25\1\0\1\25\1\0\3\25\5\0"+
    "\4\25\3\0\12\25\1\231\13\25\1\0\1\25\1\0"+
    "\1\25\5\0\1\25\2\0\2\25\2\0\2\25\1\0"+
    "\1\25\1\0\3\25\5\0\4\25\3\0\17\25\1\232"+
    "\6\25\1\0\1\25\1\0\1\25\5\0\1\25\2\0"+
    "\2\25\2\0\2\25\1\0\1\25\1\0\3\25\5\0"+
    "\4\25\3\0\13\25\1\233\12\25\1\0\1\25\1\0"+
    "\1\25";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5278];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\1\1\3\11\5\1\1\11"+
    "\3\1\1\11\13\1\2\11\3\1\2\11\2\1\3\11"+
    "\1\1\22\0\3\11\3\0\2\1\1\0\2\11\17\1"+
    "\2\11\1\0\6\11\1\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\1\1\11\1\0\1\1\1\0\1\11\20\1"+
    "\4\11\1\0\12\1\1\0\4\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer strBuff = new StringBuffer();

	int nestedBlockCommentCount = 0;
	
    public long getChar() {
        return yychar + 1;
    }

    public int getColumn() {
        return yycolumn + 1;
    }

    public int getLine() {
        return yyline + 1;
    }

    public String getText() {
        return yytext();
    }
    
    public double ParseDouble(String s)
    {
        return Double.parseDouble(s);
    }

    // TODO(afb) :: Add negative number parsing
    public int ParseInteger(String s)
    {
        int result = Integer.parseInt(s);
        return result;
    }

    public int ParseBinaryToInteger(String s)
    {
        s = s.substring(2);
        return Integer.parseInt(s, 2);
    }

    public Integer ParseHexToInteger(String s)
    {
		String num = s.replaceFirst("#x", "");
		num = num.replaceAll(" ", "");
		return Integer.parseInt(num, 16);
    }

	public Character ParseUnicodeToChar(String s)
	{
		int c = Integer.parseInt(s.substring(2), 16);
		return Character.valueOf(Character.toChars(c)[0]);
	}
	
    // TODO(afb) :: Consider making it a Character
    public Character ParseChar(String s)
    {
        return s.charAt(2);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <" + yytext()+">");
            }
            // fall through
          case 73: break;
          case 2:
            { 
            }
            // fall through
          case 74: break;
          case 3:
            { yychar = 0;
            }
            // fall through
          case 75: break;
          case 4:
            { yybegin(PARSE_STRING);
            }
            // fall through
          case 76: break;
          case 5:
            { return new Symbol(sym.LPAREN);
            }
            // fall through
          case 77: break;
          case 6:
            { return new Symbol(sym.RPAREN);
            }
            // fall through
          case 78: break;
          case 7:
            { return new Symbol(sym.COMMA);
            }
            // fall through
          case 79: break;
          case 8:
            { return new Symbol(sym.INT, ParseInteger(yytext()));
            }
            // fall through
          case 80: break;
          case 9:
            { return new Symbol(sym.COLON);
            }
            // fall through
          case 81: break;
          case 10:
            { return new Symbol(sym.SEMI);
            }
            // fall through
          case 82: break;
          case 11:
            { return new Symbol(sym.AT);
            }
            // fall through
          case 83: break;
          case 12:
            { return new Symbol(sym.VAR, yytext());
            }
            // fall through
          case 84: break;
          case 13:
            { return new Symbol(sym.LBRACKET);
            }
            // fall through
          case 85: break;
          case 14:
            { return new Symbol(sym.RBRACKET);
            }
            // fall through
          case 86: break;
          case 15:
            { return new Symbol(sym.LBRACE);
            }
            // fall through
          case 87: break;
          case 16:
            { return new Symbol(sym.RBRACE);
            }
            // fall through
          case 88: break;
          case 17:
            { strBuff.append(yytext());
            }
            // fall through
          case 89: break;
          case 18:
            { /* User generated line break within a string. Do nothing */
            }
            // fall through
          case 90: break;
          case 19:
            { yybegin(YYINITIAL);
					Symbol s = new Symbol(sym.STRING, strBuff.toString());
					strBuff = new StringBuffer();
					return s;
            }
            // fall through
          case 91: break;
          case 20:
            { yybegin(ESCAPE_SEQUENCE);
            }
            // fall through
          case 92: break;
          case 21:
            { yybegin(PARSE_STRING); strBuff.append("\n");
            }
            // fall through
          case 93: break;
          case 22:
            { yybegin(PARSE_STRING); strBuff.append("\t");
            }
            // fall through
          case 94: break;
          case 23:
            { yybegin(PARSE_STRING); strBuff.append("\\");
            }
            // fall through
          case 95: break;
          case 24:
            { yychar -= yytext().length();
            }
            // fall through
          case 96: break;
          case 25:
            { return new Symbol(sym.NIL);
            }
            // fall through
          case 97: break;
          case 26:
            { return new Symbol(sym.FALSE);
            }
            // fall through
          case 98: break;
          case 27:
            { return new Symbol(sym.TRUE);
            }
            // fall through
          case 99: break;
          case 28:
            { return new Symbol(sym.DOUBLE, ParseDouble(yytext()));
            }
            // fall through
          case 100: break;
          case 29:
            { nestedBlockCommentCount += 1;
					yychar -= 2;
					yybegin(BLK_COMMENT);
            }
            // fall through
          case 101: break;
          case 30:
            { return new Symbol(sym.RB_COLON);
            }
            // fall through
          case 102: break;
          case 31:
            { return new Symbol(sym.LB_COLON);
            }
            // fall through
          case 103: break;
          case 32:
            { return new Symbol(sym.IF);
            }
            // fall through
          case 104: break;
          case 33:
            { return new Symbol(sym.OR);
            }
            // fall through
          case 105: break;
          case 34:
            { nestedBlockCommentCount -= 1;
			yychar -= 2;
			if (nestedBlockCommentCount == 0){
				yybegin(YYINITIAL);
			}
            }
            // fall through
          case 106: break;
          case 35:
            { nestedBlockCommentCount += 1;
			yychar -= 2;
            }
            // fall through
          case 107: break;
          case 36:
            { return new Symbol(sym.MOD);
            }
            // fall through
          case 108: break;
          case 37:
            { return new Symbol(sym.BIT_AND);
            }
            // fall through
          case 109: break;
          case 38:
            { return new Symbol(sym.MUL);
            }
            // fall through
          case 110: break;
          case 39:
            { return new Symbol(sym.PLUS);
            }
            // fall through
          case 111: break;
          case 40:
            { return new Symbol(sym.MINUS);
            }
            // fall through
          case 112: break;
          case 41:
            { return new Symbol(sym.DIV);
            }
            // fall through
          case 113: break;
          case 42:
            { return new Symbol(sym.COND, "LT");
            }
            // fall through
          case 114: break;
          case 43:
            { return new Symbol(sym.COND, "EQUAL");
            }
            // fall through
          case 115: break;
          case 44:
            { return new Symbol(sym.COND, "GT");
            }
            // fall through
          case 116: break;
          case 45:
            { return new Symbol(sym.BIT_OR);
            }
            // fall through
          case 117: break;
          case 46:
            { return new Symbol(sym.BIT_NOT);
            }
            // fall through
          case 118: break;
          case 47:
            { return new Symbol(sym.INT, ParseBinaryToInteger(yytext()));
            }
            // fall through
          case 119: break;
          case 48:
            { return new Symbol(sym.CHAR, ParseChar(yytext()));
            }
            // fall through
          case 120: break;
          case 49:
            { return new Symbol(sym.INT, ParseHexToInteger(yytext()));
            }
            // fall through
          case 121: break;
          case 50:
            { /* Line comment. Do Nothing*/
            }
            // fall through
          case 122: break;
          case 51:
            { return new Symbol(sym.AND);
            }
            // fall through
          case 123: break;
          case 52:
            { return new Symbol(sym.CAR);
            }
            // fall through
          case 124: break;
          case 53:
            { return new Symbol(sym.CDR);
            }
            // fall through
          case 125: break;
          case 54:
            { return new Symbol(sym.DEF);
            }
            // fall through
          case 126: break;
          case 55:
            { return new Symbol(sym.NOT);
            }
            // fall through
          case 127: break;
          case 56:
            { return new Symbol(sym.COND, "NE");
            }
            // fall through
          case 128: break;
          case 57:
            { return new Symbol(sym.ASSIGN);
            }
            // fall through
          case 129: break;
          case 58:
            { return new Symbol(sym.COND, "LE");
            }
            // fall through
          case 130: break;
          case 59:
            { return new Symbol(sym.COND, "GE");
            }
            // fall through
          case 131: break;
          case 60:
            { return new Symbol(sym.ELSE);
            }
            // fall through
          case 132: break;
          case 61:
            { return new Symbol(sym.EQV);
            }
            // fall through
          case 133: break;
          case 62:
            { return new Symbol(sym.LIST);
            }
            // fall through
          case 134: break;
          case 63:
            { return new Symbol(sym.PAIR);
            }
            // fall through
          case 135: break;
          case 64:
            { return new Symbol(sym.PROC);
            }
            // fall through
          case 136: break;
          case 65:
            { return new Symbol(sym.SIZE);
            }
            // fall through
          case 137: break;
          case 66:
            { return new Symbol(sym.THEN);
            }
            // fall through
          case 138: break;
          case 67:
            { return new Symbol(sym.IS_PAIR);
            }
            // fall through
          case 139: break;
          case 68:
            { return new Symbol(sym.PRINT);
            }
            // fall through
          case 140: break;
          case 69:
            { return new Symbol(sym.CHAR, ParseUnicodeToChar(yytext()));
            }
            // fall through
          case 141: break;
          case 70:
            { return new Symbol(sym.EQL);
            }
            // fall through
          case 142: break;
          case 71:
            { return new Symbol(sym.SUBSTR);
            }
            // fall through
          case 143: break;
          case 72:
            { return new Symbol(sym.PRINTLN);
            }
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
