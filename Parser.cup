import java_cup.runtime.*;
import java.io.*;
import java.util.*;


parser code {:
	   Lexer lexer;

	   public SmplParser(Lexer l) {
	   		  super(l);
			  lexer = l;
	   }

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
							 " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
							   	 lexer.getText());
		}
:};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};


// Incomplete
terminal CHAR;

terminal LPAREN, RPAREN, LBRACE, RBRACE;

// Arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD;

// Comparators
terminal GT, LT, GE, LE, NE;

// Types
terminal Integer INT;
terminal Boolean BOOL;

non terminal Exp expression, term, factor;

expression ::= expression:e PLUS  term:t {: :} |
		   	   expression:e MINUS term:t {: :} |
			   term:t {: :};

term ::= term:t MUL factor:f {: :} |
	 	 term:t DIV factor:f {: :} |
		 factor:f {: :};

factor ::= INT:i {: :} |
	   	   BOOL:b {: :} |
		   LPAREN expression:e RPAREN {: :};