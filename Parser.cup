import java_cup.runtime.*;
import java.io.*;
import java.util.*;


parser code {:
	   Lexer lexer;

	   public SmplParser(Lexer l) {
	   		  super(l);
			  lexer = l;
	   }

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
							 " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
							   	 lexer.getText());
		}
:};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};



terminal COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, LB_COLON, RB_COLON;
terminal IS_PAIR, PAIR, CAR, CDR, LIST, SIZE, EQV, EQL, SUBSTR, DEF, PROC, NIL;
terminal PRINT, PRINTLN, READ, READINT;
terminal LET;

// Arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal AND, OR, NOT;
terminal BIT_AND, BIT_OR, BIT_NOT;
terminal SEMI, AT;

// Comparators
terminal String COND; // GT, LT, GE, LE, NE;
terminal ASSIGN, EQUAL, COMMA;

terminal IF, THEN, ELSE;
// Types
terminal String STRING;
terminal String VAR;
terminal Integer INT;
terminal Double DOUBLE;
terminal Character CHAR;

terminal TRUE;
terminal FALSE;

non terminal ExpBind bind;
non terminal ArrayList<ExpBind> bindList;
non terminal Exp let;
non terminal ExpLit bool;

non terminal Exp expression, expSeq, addSub, boolExp, cmp, bitwise, bitNot, term, factor;
non terminal Statement stmt;
non terminal StatementSequence stmtList;
non terminal StatementDefinition definition;

non terminal SmplProgram program;

// Function Def
non terminal StmtFuncDefinition funcDefn;
non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;


// Function Call
non terminal ExpFuncCall funcCall;
non terminal ArrayList<Exp> argList;
non terminal ArrayList<Exp> argListE;

non terminal Exp;

non terminal Exp list;
non terminal Exp pair;

// Vector
non terminal Exp vector;
non terminal ExpVectorParam subVector;
non terminal ArrayList<Exp> subVectorList;
non terminal ArrayList<Exp> subVectorListE;

non terminal ExpOps ops;

non terminal Exp print, println, read, readInt;

non terminal StmtIf, stmtIf, stmtElse;
non terminal Exp cmpExp; 

non terminal empty;

program ::= stmtList:seq {: RESULT = new SmplProgram(seq); :};

stmtList ::= stmtList:seq stmt:s {: RESULT = seq.add(s); :} | 
			 stmt:s {: RESULT = new StatementSequence(s); :};
			 
stmt ::= expression:e SEMI {: RESULT = new Statement(e); :} |
	 	 definition:d {: RESULT = d; :} |
		 funcDefn:f {: RESULT = f; :};

cmpExp ::= expression:e1 COND:c expression:e2 {: :} | expression:e1 EQUAL expression:e2 {: :};

funcDefn ::= DEF VAR:var PROC LPAREN paramListE:pList RPAREN LBRACE stmtList:seq RBRACE
		 	 {: RESULT = new StmtFuncDefinition(var, pList, seq); :};

paramListE ::= paramList:pList {: RESULT = pList; :} |
		   	   empty {: RESULT = new ArrayList<String>(); :};

paramList ::= paramList:seq COMMA VAR:v  {: seq.add(v); RESULT = seq; :} |
		  	  VAR:v {:
					ArrayList<String> result = new ArrayList<>();
					result.add(v);
					RESULT = result;
			:};

definition ::= DEF VAR:var expression:e SEMI {: RESULT = new StatementDefinition(var, e); :};		   	   

// expression:e LBRACKET expression:i RBRACKET {: RESULT = new ExpOps("index", e, i); :} |

funcCall ::= VAR:v LPAREN argListE:aList RPAREN {: RESULT = new ExpFuncCall(v, aList); :};
		   
argList ::= argList:seq COMMA expression:e  {: seq.add(e); RESULT = seq; :} |
			 	 expression:e {:
					ArrayList<Exp> result = new ArrayList<>();
					result.add(e);
					RESULT = result;
			:};
			
argListE ::= argList:aList {: RESULT = aList; :} |
		 	 empty {: RESULT = new ArrayList<Exp>(); :};		   

bool ::= TRUE {: RESULT = new ExpLit(true, "smpl-boolean"); :} |
	 	 FALSE {: RESULT = new ExpLit(false, "smpl-boolean"); :};

expression ::= boolExp:b {: RESULT = b; :} |
		   	   expSeq:seq {: RESULT = seq; :} |
			   VAR:var ASSIGN expression:e {: RESULT = new ExpAssign(var, e); :} |let:le {: RESULT = le; :};

expSeq ::= LBRACE argList:seq RBRACE
	   	   {: RESULT = new ExpSeq(seq); :};

boolExp ::= boolExp:b AND cmp:c {: RESULT = new ExpAnd(b, c); :} |
			boolExp:b OR cmp:c  {: RESULT = new ExpOr(b, c); :} |
			NOT cmp:c {: RESULT = new ExpNot(c); :} |
			cmp:c {: RESULT = c; :};

cmp ::= cmp:c COND:cond bitwise:b {: RESULT = new ExpCmp(cond, c, b); :} |
		bitwise:b {: RESULT = b; :} | cmp:c EQUAL bitwise:b {: RESULT = new ExpCmp("EQUAL", c, b); :};

bitwise ::= bitwise:b BIT_AND addSub:t {: RESULT = new ExpBitAnd(b, t);:} |
			bitwise:b BIT_OR  addSub:t {: RESULT = new ExpBitOr(b, t); :} |			
			addSub:t {: RESULT = t; :} | bitwise:b AT list:l {: RESULT = new ExpConcat(b,l); :};

addSub ::= addSub:a PLUS  term:b {: RESULT = new ExpAdd(a, b); :} |			   
		   addSub:a MINUS term:b {: RESULT = new ExpSub(a, b); :} |
		   term:t {: RESULT = t; :};
		   
term ::= term:t MUL bitNot:b {: RESULT = new ExpMul(t, b); :} |
	 	 term:t DIV bitNot:b {: RESULT = new ExpDiv(t, b); :} |
		 term:t MOD bitNot:b {: RESULT = new ExpMod(t, b); :} |
		 bitNot:b {: RESULT = b; :};

bitNot ::= BIT_NOT factor:f {: RESULT = new ExpBitNot(f); :} |
	   	   factor:f {: RESULT = f; :};

factor ::= funcCall:f {: RESULT = f; :} |
	   	   INT:v {: RESULT = new ExpLit(v, "smpl-integer"); :} |
	   	   DOUBLE:v {: RESULT = new ExpLit(v, "smpl-double"); :} |
		   CHAR:c {: RESULT = new ExpLit(c, "smpl-character"); :} |
		   STRING:s {: RESULT = new ExpLit(s, "smpl-string"); :} |
		   bool:b {: RESULT = b; :} |
		   pair:p {: RESULT = p; :} |
		   vector:v {: RESULT = v; :} |
		   list:l {: RESULT = l; :} |
		   ops:o {: RESULT = o; :} |
		   print:p {: RESULT = p; :} |
		   read:r {: RESULT = r; :} |
		   VAR:var {: RESULT = new ExpVar(var); :} |
		   LPAREN expression:e RPAREN {: RESULT = e; :} |		   
		   LPAREN MINUS expression:e RPAREN {: :};

print ::= PRINT LPAREN expression:exp RPAREN
	  	  {: RESULT = new ExpPrint(exp); :} |
		  PRINTLN LPAREN expression:exp RPAREN
	  	  {: RESULT = new ExpPrintln(exp); :};

read ::= READ LPAREN RPAREN {: RESULT = new ExpRead(); :} |
	 	 READINT LPAREN RPAREN {: RESULT = new ExpReadInt(); :};

ops ::= SIZE LPAREN expression:e RPAREN {: RESULT = new ExpOps("size", e); :} |
		CAR LPAREN expression:e RPAREN {: RESULT = new ExpOps("car", e); :} |
		CDR LPAREN expression:e RPAREN {: RESULT = new ExpOps("cdr", e); :} |
		EQV LPAREN expression:e1 COMMA expression:e2 RPAREN {: RESULT = new ExpOps("eqv", e1, e2); :} |
		EQL LPAREN expression:e1 COMMA expression:e2 RPAREN {: RESULT = new ExpOps("equ", e1, e2); :} |
		IS_PAIR LPAREN expression:e RPAREN {: RESULT = new ExpOps("is-pair", e); :} |
		SUBSTR LPAREN expression:s COMMA expression:start COMMA expression:end RPAREN
		{: RESULT = new ExpOps("substr", s, start, end); :};

//Added - New 
let ::= LET LPAREN bindList:blst RPAREN expression:body {: RESULT = new ExpLet(blst,body); :} | LET LPAREN bindList:blst RPAREN LBRACE stmtList:body RBRACE {: RESULT = new ExpLet(blst,body); :} ;

//used in let definition
bind ::= VAR:v EQUAL expression:e {: RESULT = new ExpBind(v,e); :};

bindList ::= bindList:blst COMMA bind:b {: blst.add(b);
			RESULT = blst; :} |
		bind:b {:
				ArrayList<ExpBind> result = new ArrayList<>();
				result.add(b); 
				RESULT = result;
			:} | {: ArrayList<ExpBind> result = new ArrayList<>();
				RESULT = result; :};
// end addition let
list ::= LBRACKET argListE:aList RBRACKET
	   	 {: RESULT = new ExpLit(aList, "smpl-list"); :} |
		 LIST LPAREN argListE:aList RPAREN
		 {: RESULT = new ExpLit(aList, "smpl-list"); :};


vector ::= LB_COLON subVectorListE:v RB_COLON
	   	   {: RESULT = new ExpLit(v, "smpl-vector"); :};

subVectorListE ::= subVectorList:v {: RESULT = v; :} |
			   	   empty {: RESULT = new ArrayList<Exp>(); :};

subVectorList ::= subVectorList:seq COMMA subVector:e
			  	  {: seq.add(e); RESULT = seq; :} |
				  subVector:e
				  {:
				  	 ArrayList<Exp> r = new ArrayList<>();
					 r.add(e);
					 RESULT = r;
				  :};

subVector ::= expression:e {: RESULT = new ExpVectorParam(e); :} |
		  	  expression:n COLON PROC LPAREN VAR:v RPAREN expression:eval
			  {: RESULT = new ExpVectorParam(n, v, eval); :};
	

pair ::= PAIR LPAREN expression:e1 COMMA expression:e2 RPAREN
	 	 {:
			ArrayList<Exp> r = new ArrayList<Exp>();
			r.add(e1);
			r.add(e2);
			RESULT = new ExpLit(r, "smpl-pair");
		:};
		
empty ::= ;