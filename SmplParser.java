
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SmplParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\022\003\000\002\002\004\000\002\020" +
    "\004\000\002\020\003\000\002\017\004\000\002\017\003" +
    "\000\002\017\003\000\002\050\005\000\002\050\005\000" +
    "\002\023\013\000\002\025\003\000\002\025\003\000\002" +
    "\024\005\000\002\024\003\000\002\021\006\000\002\026" +
    "\006\000\002\027\005\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\004\000\002\011\003\000\002\012\005" +
    "\000\002\012\003\000\002\012\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\014\004" +
    "\000\002\014\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\005\000\002\016\006\000" +
    "\002\041\006\000\002\041\006\000\002\043\005\000\002" +
    "\043\005\000\002\040\006\000\002\040\006\000\002\040" +
    "\006\000\002\040\010\000\002\040\010\000\002\040\006" +
    "\000\002\040\012\000\002\004\007\000\002\002\005\000" +
    "\002\003\005\000\002\003\003\000\002\003\002\000\002" +
    "\032\005\000\002\032\006\000\002\034\005\000\002\037" +
    "\003\000\002\037\003\000\002\036\005\000\002\036\003" +
    "\000\002\035\003\000\002\035\011\000\002\033\010\000" +
    "\002\051\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\072\005\021\007\042\011\007\013\054\015" +
    "\040\016\037\017\015\020\020\021\046\022\034\023\041" +
    "\024\047\025\050\026\056\031\064\032\023\033\044\034" +
    "\012\035\052\045\025\050\013\062\055\063\063\064\022" +
    "\065\016\066\011\067\035\070\061\001\002\000\004\002" +
    "\273\001\002\000\046\004\uffce\006\uffce\010\uffce\012\uffce" +
    "\014\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\046\uffce\047\uffce\051\uffce\053\uffce\055\uffce" +
    "\056\uffce\001\002\000\046\004\uffcc\006\uffcc\010\uffcc\012" +
    "\uffcc\014\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\046\uffcc\047\uffcc\051\uffcc\053\uffcc\055" +
    "\uffcc\056\uffcc\001\002\000\072\005\021\007\042\011\007" +
    "\012\uffaa\013\054\015\040\016\037\017\015\020\020\021" +
    "\046\022\034\023\041\024\047\025\050\031\064\032\023" +
    "\033\044\034\012\035\052\045\025\050\013\062\055\063" +
    "\063\064\022\065\016\066\011\067\035\070\061\001\002" +
    "\000\074\002\001\005\021\007\042\011\007\013\054\015" +
    "\040\016\037\017\015\020\020\021\046\022\034\023\041" +
    "\024\047\025\050\026\056\031\064\032\023\033\044\034" +
    "\012\035\052\045\025\050\013\062\055\063\063\064\022" +
    "\065\016\066\011\067\035\070\061\001\002\000\046\004" +
    "\uffd0\006\uffd0\010\uffd0\012\uffd0\014\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0\047" +
    "\uffd0\051\uffd0\053\uffd0\055\uffd0\056\uffd0\001\002\000\004" +
    "\005\267\001\002\000\060\005\021\011\007\013\054\015" +
    "\040\016\037\017\015\020\020\021\046\022\034\023\041" +
    "\024\047\025\050\031\064\032\023\033\044\034\012\062" +
    "\055\063\107\064\022\065\016\066\011\067\035\070\061" +
    "\001\002\000\076\002\ufffc\005\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\045\ufffc\050\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\001" +
    "\002\000\004\005\263\001\002\000\046\004\uffd1\006\uffd1" +
    "\010\uffd1\012\uffd1\014\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\046\uffd1\047\uffd1\051\uffd1" +
    "\053\uffd1\055\uffd1\056\uffd1\001\002\000\024\004\uffeb\006" +
    "\uffeb\010\uffeb\012\uffeb\014\uffeb\043\257\044\260\051\uffeb" +
    "\056\uffeb\001\002\000\004\005\254\001\002\000\072\005" +
    "\021\007\042\011\007\013\054\015\040\016\037\017\015" +
    "\020\020\021\046\022\034\023\041\024\047\025\050\031" +
    "\064\032\023\033\044\034\012\035\052\037\247\045\025" +
    "\050\013\062\055\063\063\064\022\065\016\066\011\067" +
    "\035\070\061\001\002\000\046\004\uffd2\006\uffd2\010\uffd2" +
    "\012\uffd2\014\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\046\uffd2\047\uffd2\051\uffd2\053\uffd2" +
    "\055\uffd2\056\uffd2\001\002\000\004\005\244\001\002\000" +
    "\046\004\uffcd\006\uffcd\010\uffcd\012\uffcd\014\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\046" +
    "\uffcd\047\uffcd\051\uffcd\053\uffcd\055\uffcd\056\uffcd\001\002" +
    "\000\062\005\021\011\007\013\054\015\040\016\037\017" +
    "\015\020\020\021\046\022\034\023\041\024\047\025\050" +
    "\031\064\032\023\033\044\034\012\050\013\062\055\063" +
    "\107\064\022\065\016\066\011\067\035\070\061\001\002" +
    "\000\020\004\uffe8\006\uffe8\010\uffe8\012\uffe8\014\uffe8\051" +
    "\uffe8\056\uffe8\001\002\000\046\004\uffca\006\uffca\010\uffca" +
    "\012\uffca\014\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\046\uffca\047\uffca\051\uffca\053\uffca" +
    "\055\uffca\056\uffca\001\002\000\046\004\uffc8\006\uffc8\010" +
    "\uffc8\012\uffc8\014\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8\051\uffc8\053" +
    "\uffc8\055\uffc8\056\uffc8\001\002\000\046\004\uffcb\006\uffcb" +
    "\010\uffcb\012\uffcb\014\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\047\uffcb\051\uffcb" +
    "\053\uffcb\055\uffcb\056\uffcb\001\002\000\004\051\242\001" +
    "\002\000\020\004\uffea\006\uffea\010\uffea\012\uffea\014\uffea" +
    "\051\uffea\056\uffea\001\002\000\004\005\237\001\002\000" +
    "\046\004\uffed\006\uffed\010\uffed\012\uffed\014\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\046" +
    "\uffed\047\uffed\051\uffed\053\uffed\055\uffed\056\uffed\001\002" +
    "\000\046\004\uffda\006\uffda\010\uffda\012\uffda\014\uffda\036" +
    "\uffda\037\uffda\040\111\041\112\042\110\043\uffda\044\uffda" +
    "\046\uffda\047\uffda\051\uffda\053\uffda\055\uffda\056\uffda\001" +
    "\002\000\004\005\232\001\002\000\004\005\227\001\002" +
    "\000\004\005\222\001\002\000\070\005\021\007\042\011" +
    "\007\013\054\015\040\016\037\017\015\020\020\021\046" +
    "\022\034\023\041\024\047\025\050\031\064\032\023\033" +
    "\044\034\012\035\052\045\025\050\013\062\055\063\063" +
    "\064\022\065\016\066\011\067\035\070\061\001\002\000" +
    "\076\002\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\045\ufffb\050\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\001\002\000\004" +
    "\005\216\001\002\000\034\004\uffe1\006\uffe1\010\uffe1\012" +
    "\uffe1\014\uffe1\043\uffe1\044\uffe1\046\173\047\172\051\uffe1" +
    "\053\uffe1\055\uffe1\056\uffe1\001\002\000\004\005\213\001" +
    "\002\000\004\005\206\001\002\000\004\005\177\001\002" +
    "\000\030\004\uffe3\006\uffe3\010\uffe3\012\uffe3\014\uffe3\043" +
    "\uffe3\044\uffe3\051\uffe3\053\170\055\167\056\uffe3\001\002" +
    "\000\004\005\155\001\002\000\046\004\uffd3\006\uffd3\010" +
    "\uffd3\012\uffd3\014\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3\051\uffd3\053" +
    "\uffd3\055\uffd3\056\uffd3\001\002\000\072\005\021\007\042" +
    "\011\007\013\054\014\uffaa\015\040\016\037\017\015\020" +
    "\020\021\046\022\034\023\041\024\047\025\050\031\064" +
    "\032\023\033\044\034\012\035\052\045\025\050\013\062" +
    "\055\063\063\064\022\065\016\066\011\067\035\070\061" +
    "\001\002\000\046\004\uffcf\006\uffcf\010\uffcf\012\uffcf\014" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\046\uffcf\047\uffcf\051\uffcf\053\uffcf\055\uffcf\056" +
    "\uffcf\001\002\000\004\063\117\001\002\000\046\004\uffc9" +
    "\006\uffc9\010\uffc9\012\uffc9\014\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9" +
    "\051\uffc9\053\uffc9\055\uffc9\056\uffc9\001\002\000\046\004" +
    "\uffd4\006\uffd4\010\uffd4\012\uffd4\014\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\047" +
    "\uffd4\051\uffd4\053\uffd4\055\uffd4\056\uffd4\001\002\000\046" +
    "\004\uffec\006\uffec\010\uffec\012\uffec\014\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\046\uffec" +
    "\047\uffec\051\uffec\053\uffec\055\uffec\056\uffec\001\002\000" +
    "\040\004\uffdd\006\uffdd\010\uffdd\012\uffdd\014\uffdd\036\104" +
    "\037\105\043\uffdd\044\uffdd\046\uffdd\047\uffdd\051\uffdd\053" +
    "\uffdd\055\uffdd\056\uffdd\001\002\000\052\004\uffc7\005\072" +
    "\006\uffc7\010\uffc7\012\uffc7\014\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\046\uffc7\047\uffc7" +
    "\051\uffc7\053\uffc7\054\073\055\uffc7\056\uffc7\001\002\000" +
    "\004\005\067\001\002\000\076\002\ufffe\005\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\013\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\045\ufffe\050" +
    "\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe" +
    "\070\ufffe\001\002\000\046\004\uffd6\006\uffd6\010\uffd6\012" +
    "\uffd6\014\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\046\uffd6\047\uffd6\051\uffd6\053\uffd6\055" +
    "\uffd6\056\uffd6\001\002\000\070\005\021\007\042\011\007" +
    "\013\054\015\040\016\037\017\015\020\020\021\046\022" +
    "\034\023\041\024\047\025\050\031\064\032\023\033\044" +
    "\034\012\035\052\045\025\050\013\062\055\063\063\064" +
    "\022\065\016\066\011\067\035\070\061\001\002\000\004" +
    "\006\071\001\002\000\046\004\uffc4\006\uffc4\010\uffc4\012" +
    "\uffc4\014\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\046\uffc4\047\uffc4\051\uffc4\053\uffc4\055" +
    "\uffc4\056\uffc4\001\002\000\072\005\021\006\uffaa\007\042" +
    "\011\007\013\054\015\040\016\037\017\015\020\020\021" +
    "\046\022\034\023\041\024\047\025\050\031\064\032\023" +
    "\033\044\034\012\035\052\045\025\050\013\062\055\063" +
    "\063\064\022\065\016\066\011\067\035\070\061\001\002" +
    "\000\070\005\021\007\042\011\007\013\054\015\040\016" +
    "\037\017\015\020\020\021\046\022\034\023\041\024\047" +
    "\025\050\031\064\032\023\033\044\034\012\035\052\045" +
    "\025\050\013\062\055\063\063\064\022\065\016\066\011" +
    "\067\035\070\061\001\002\000\020\004\uffe9\006\uffe9\010" +
    "\uffe9\012\uffe9\014\uffe9\051\uffe9\056\uffe9\001\002\000\006" +
    "\006\uffee\012\uffee\001\002\000\010\006\uffef\012\uffef\056" +
    "\102\001\002\000\004\006\101\001\002\000\012\006\ufff0" +
    "\010\ufff0\012\ufff0\056\ufff0\001\002\000\046\004\ufff2\006" +
    "\ufff2\010\ufff2\012\ufff2\014\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2\047\ufff2\051" +
    "\ufff2\053\ufff2\055\ufff2\056\ufff2\001\002\000\070\005\021" +
    "\007\042\011\007\013\054\015\040\016\037\017\015\020" +
    "\020\021\046\022\034\023\041\024\047\025\050\031\064" +
    "\032\023\033\044\034\012\035\052\045\025\050\013\062" +
    "\055\063\063\064\022\065\016\066\011\067\035\070\061" +
    "\001\002\000\012\006\ufff1\010\ufff1\012\ufff1\056\ufff1\001" +
    "\002\000\062\005\021\011\007\013\054\015\040\016\037" +
    "\017\015\020\020\021\046\022\034\023\041\024\047\025" +
    "\050\031\064\032\023\033\044\034\012\050\013\062\055" +
    "\063\107\064\022\065\016\066\011\067\035\070\061\001" +
    "\002\000\062\005\021\011\007\013\054\015\040\016\037" +
    "\017\015\020\020\021\046\022\034\023\041\024\047\025" +
    "\050\031\064\032\023\033\044\034\012\050\013\062\055" +
    "\063\107\064\022\065\016\066\011\067\035\070\061\001" +
    "\002\000\046\004\uffdb\006\uffdb\010\uffdb\012\uffdb\014\uffdb" +
    "\036\uffdb\037\uffdb\040\111\041\112\042\110\043\uffdb\044" +
    "\uffdb\046\uffdb\047\uffdb\051\uffdb\053\uffdb\055\uffdb\056\uffdb" +
    "\001\002\000\050\004\uffc7\005\072\006\uffc7\010\uffc7\012" +
    "\uffc7\014\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\046\uffc7\047\uffc7\051\uffc7\053\uffc7\055" +
    "\uffc7\056\uffc7\001\002\000\062\005\021\011\007\013\054" +
    "\015\040\016\037\017\015\020\020\021\046\022\034\023" +
    "\041\024\047\025\050\031\064\032\023\033\044\034\012" +
    "\050\013\062\055\063\107\064\022\065\016\066\011\067" +
    "\035\070\061\001\002\000\062\005\021\011\007\013\054" +
    "\015\040\016\037\017\015\020\020\021\046\022\034\023" +
    "\041\024\047\025\050\031\064\032\023\033\044\034\012" +
    "\050\013\062\055\063\107\064\022\065\016\066\011\067" +
    "\035\070\061\001\002\000\062\005\021\011\007\013\054" +
    "\015\040\016\037\017\015\020\020\021\046\022\034\023" +
    "\041\024\047\025\050\031\064\032\023\033\044\034\012" +
    "\050\013\062\055\063\107\064\022\065\016\066\011\067" +
    "\035\070\061\001\002\000\046\004\uffd8\006\uffd8\010\uffd8" +
    "\012\uffd8\014\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\046\uffd8\047\uffd8\051\uffd8\053\uffd8" +
    "\055\uffd8\056\uffd8\001\002\000\046\004\uffd9\006\uffd9\010" +
    "\uffd9\012\uffd9\014\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\046\uffd9\047\uffd9\051\uffd9\053" +
    "\uffd9\055\uffd9\056\uffd9\001\002\000\046\004\uffd7\006\uffd7" +
    "\010\uffd7\012\uffd7\014\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\047\uffd7\051\uffd7" +
    "\053\uffd7\055\uffd7\056\uffd7\001\002\000\046\004\uffdc\006" +
    "\uffdc\010\uffdc\012\uffdc\014\uffdc\036\uffdc\037\uffdc\040\111" +
    "\041\112\042\110\043\uffdc\044\uffdc\046\uffdc\047\uffdc\051" +
    "\uffdc\053\uffdc\055\uffdc\056\uffdc\001\002\000\072\005\021" +
    "\007\042\011\007\013\054\015\040\016\037\017\015\020" +
    "\020\021\046\022\034\023\041\024\047\025\050\027\121" +
    "\031\064\032\023\033\044\034\012\035\052\045\025\050" +
    "\013\062\055\063\063\064\022\065\016\066\011\067\035" +
    "\070\061\001\002\000\004\051\136\001\002\000\004\005" +
    "\122\001\002\000\006\006\uffaa\063\123\001\002\000\006" +
    "\006\ufff4\056\ufff4\001\002\000\006\006\ufff7\056\134\001" +
    "\002\000\004\006\127\001\002\000\004\006\ufff6\001\002" +
    "\000\004\007\130\001\002\000\072\005\021\007\042\011" +
    "\007\013\054\015\040\016\037\017\015\020\020\021\046" +
    "\022\034\023\041\024\047\025\050\026\056\031\064\032" +
    "\023\033\044\034\012\035\052\045\025\050\013\062\055" +
    "\063\063\064\022\065\016\066\011\067\035\070\061\001" +
    "\002\000\074\005\021\007\042\010\132\011\007\013\054" +
    "\015\040\016\037\017\015\020\020\021\046\022\034\023" +
    "\041\024\047\025\050\026\056\031\064\032\023\033\044" +
    "\034\012\035\052\045\025\050\013\062\055\063\063\064" +
    "\022\065\016\066\011\067\035\070\061\001\002\000\076" +
    "\002\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\045\ufff8\050\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\001\002\000\076\002" +
    "\uffff\005\uffff\007\uffff\010\uffff\011\uffff\013\uffff\015\uffff" +
    "\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024" +
    "\uffff\025\uffff\026\uffff\031\uffff\032\uffff\033\uffff\034\uffff" +
    "\035\uffff\045\uffff\050\uffff\062\uffff\063\uffff\064\uffff\065" +
    "\uffff\066\uffff\067\uffff\070\uffff\001\002\000\004\063\135" +
    "\001\002\000\006\006\ufff5\056\ufff5\001\002\000\076\002" +
    "\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\045\ufff3\050\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\001\002\000\004\014\uffb0" +
    "\001\002\000\010\004\147\014\uffad\056\uffad\001\002\000" +
    "\006\014\uffb1\056\145\001\002\000\006\014\uffae\056\uffae" +
    "\001\002\000\004\014\144\001\002\000\046\004\uffb2\006" +
    "\uffb2\010\uffb2\012\uffb2\014\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\047\uffb2\051" +
    "\uffb2\053\uffb2\055\uffb2\056\uffb2\001\002\000\070\005\021" +
    "\007\042\011\007\013\054\015\040\016\037\017\015\020" +
    "\020\021\046\022\034\023\041\024\047\025\050\031\064" +
    "\032\023\033\044\034\012\035\052\045\025\050\013\062" +
    "\055\063\063\064\022\065\016\066\011\067\035\070\061" +
    "\001\002\000\006\014\uffaf\056\uffaf\001\002\000\004\027" +
    "\150\001\002\000\004\005\151\001\002\000\004\063\152" +
    "\001\002\000\004\006\153\001\002\000\070\005\021\007" +
    "\042\011\007\013\054\015\040\016\037\017\015\020\020" +
    "\021\046\022\034\023\041\024\047\025\050\031\064\032" +
    "\023\033\044\034\012\035\052\045\025\050\013\062\055" +
    "\063\063\064\022\065\016\066\011\067\035\070\061\001" +
    "\002\000\006\014\uffac\056\uffac\001\002\000\010\006\uffb5" +
    "\056\uffb5\063\156\001\002\000\004\055\165\001\002\000" +
    "\006\006\162\056\161\001\002\000\006\006\uffb6\056\uffb6" +
    "\001\002\000\004\063\156\001\002\000\070\005\021\007" +
    "\042\011\007\013\054\015\040\016\037\017\015\020\020" +
    "\021\046\022\034\023\041\024\047\025\050\031\064\032" +
    "\023\033\044\034\012\035\052\045\025\050\013\062\055" +
    "\063\063\064\022\065\016\066\011\067\035\070\061\001" +
    "\002\000\020\004\uffb9\006\uffb9\010\uffb9\012\uffb9\014\uffb9" +
    "\051\uffb9\056\uffb9\001\002\000\006\006\uffb7\056\uffb7\001" +
    "\002\000\070\005\021\007\042\011\007\013\054\015\040" +
    "\016\037\017\015\020\020\021\046\022\034\023\041\024" +
    "\047\025\050\031\064\032\023\033\044\034\012\035\052" +
    "\045\025\050\013\062\055\063\063\064\022\065\016\066" +
    "\011\067\035\070\061\001\002\000\006\006\uffb8\056\uffb8" +
    "\001\002\000\062\005\021\011\007\013\054\015\040\016" +
    "\037\017\015\020\020\021\046\022\034\023\041\024\047" +
    "\025\050\031\064\032\023\033\044\034\012\050\013\062" +
    "\055\063\107\064\022\065\016\066\011\067\035\070\061" +
    "\001\002\000\062\005\021\011\007\013\054\015\040\016" +
    "\037\017\015\020\020\021\046\022\034\023\041\024\047" +
    "\025\050\031\064\032\023\033\044\034\012\050\013\062" +
    "\055\063\107\064\022\065\016\066\011\067\035\070\061" +
    "\001\002\000\034\004\uffe2\006\uffe2\010\uffe2\012\uffe2\014" +
    "\uffe2\043\uffe2\044\uffe2\046\173\047\172\051\uffe2\053\uffe2" +
    "\055\uffe2\056\uffe2\001\002\000\062\005\021\011\007\013" +
    "\054\015\040\016\037\017\015\020\020\021\046\022\034" +
    "\023\041\024\047\025\050\031\064\032\023\033\044\034" +
    "\012\050\013\062\055\063\107\064\022\065\016\066\011" +
    "\067\035\070\061\001\002\000\062\005\021\011\007\013" +
    "\054\015\040\016\037\017\015\020\020\021\046\022\034" +
    "\023\041\024\047\025\050\031\064\032\023\033\044\034" +
    "\012\050\013\062\055\063\107\064\022\065\016\066\011" +
    "\067\035\070\061\001\002\000\040\004\uffdf\006\uffdf\010" +
    "\uffdf\012\uffdf\014\uffdf\036\104\037\105\043\uffdf\044\uffdf" +
    "\046\uffdf\047\uffdf\051\uffdf\053\uffdf\055\uffdf\056\uffdf\001" +
    "\002\000\040\004\uffde\006\uffde\010\uffde\012\uffde\014\uffde" +
    "\036\104\037\105\043\uffde\044\uffde\046\uffde\047\uffde\051" +
    "\uffde\053\uffde\055\uffde\056\uffde\001\002\000\034\004\uffe0" +
    "\006\uffe0\010\uffe0\012\uffe0\014\uffe0\043\uffe0\044\uffe0\046" +
    "\173\047\172\051\uffe0\053\uffe0\055\uffe0\056\uffe0\001\002" +
    "\000\070\005\021\007\042\011\007\013\054\015\040\016" +
    "\037\017\015\020\020\021\046\022\034\023\041\024\047" +
    "\025\050\031\064\032\023\033\044\034\012\035\052\045" +
    "\025\050\013\062\055\063\063\064\022\065\016\066\011" +
    "\067\035\070\061\001\002\000\004\056\201\001\002\000" +
    "\070\005\021\007\042\011\007\013\054\015\040\016\037" +
    "\017\015\020\020\021\046\022\034\023\041\024\047\025" +
    "\050\031\064\032\023\033\044\034\012\035\052\045\025" +
    "\050\013\062\055\063\063\064\022\065\016\066\011\067" +
    "\035\070\061\001\002\000\004\056\203\001\002\000\070" +
    "\005\021\007\042\011\007\013\054\015\040\016\037\017" +
    "\015\020\020\021\046\022\034\023\041\024\047\025\050" +
    "\031\064\032\023\033\044\034\012\035\052\045\025\050" +
    "\013\062\055\063\063\064\022\065\016\066\011\067\035" +
    "\070\061\001\002\000\004\006\205\001\002\000\046\004" +
    "\uffba\006\uffba\010\uffba\012\uffba\014\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba\047" +
    "\uffba\051\uffba\053\uffba\055\uffba\056\uffba\001\002\000\070" +
    "\005\021\007\042\011\007\013\054\015\040\016\037\017" +
    "\015\020\020\021\046\022\034\023\041\024\047\025\050" +
    "\031\064\032\023\033\044\034\012\035\052\045\025\050" +
    "\013\062\055\063\063\064\022\065\016\066\011\067\035" +
    "\070\061\001\002\000\004\056\210\001\002\000\070\005" +
    "\021\007\042\011\007\013\054\015\040\016\037\017\015" +
    "\020\020\021\046\022\034\023\041\024\047\025\050\031" +
    "\064\032\023\033\044\034\012\035\052\045\025\050\013" +
    "\062\055\063\063\064\022\065\016\066\011\067\035\070" +
    "\061\001\002\000\004\006\212\001\002\000\046\004\uffbc" +
    "\006\uffbc\010\uffbc\012\uffbc\014\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc" +
    "\051\uffbc\053\uffbc\055\uffbc\056\uffbc\001\002\000\072\005" +
    "\021\006\uffaa\007\042\011\007\013\054\015\040\016\037" +
    "\017\015\020\020\021\046\022\034\023\041\024\047\025" +
    "\050\031\064\032\023\033\044\034\012\035\052\045\025" +
    "\050\013\062\055\063\063\064\022\065\016\066\011\067" +
    "\035\070\061\001\002\000\004\006\215\001\002\000\046" +
    "\004\uffb3\006\uffb3\010\uffb3\012\uffb3\014\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3" +
    "\047\uffb3\051\uffb3\053\uffb3\055\uffb3\056\uffb3\001\002\000" +
    "\004\006\217\001\002\000\046\004\uffc2\006\uffc2\010\uffc2" +
    "\012\uffc2\014\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\046\uffc2\047\uffc2\051\uffc2\053\uffc2" +
    "\055\uffc2\056\uffc2\001\002\000\006\010\221\056\102\001" +
    "\002\000\020\004\uffe7\006\uffe7\010\uffe7\012\uffe7\014\uffe7" +
    "\051\uffe7\056\uffe7\001\002\000\070\005\021\007\042\011" +
    "\007\013\054\015\040\016\037\017\015\020\020\021\046" +
    "\022\034\023\041\024\047\025\050\031\064\032\023\033" +
    "\044\034\012\035\052\045\025\050\013\062\055\063\063" +
    "\064\022\065\016\066\011\067\035\070\061\001\002\000" +
    "\004\056\224\001\002\000\070\005\021\007\042\011\007" +
    "\013\054\015\040\016\037\017\015\020\020\021\046\022" +
    "\034\023\041\024\047\025\050\031\064\032\023\033\044" +
    "\034\012\035\052\045\025\050\013\062\055\063\063\064" +
    "\022\065\016\066\011\067\035\070\061\001\002\000\004" +
    "\006\226\001\002\000\046\004\uffbd\006\uffbd\010\uffbd\012" +
    "\uffbd\014\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\046\uffbd\047\uffbd\051\uffbd\053\uffbd\055" +
    "\uffbd\056\uffbd\001\002\000\070\005\021\007\042\011\007" +
    "\013\054\015\040\016\037\017\015\020\020\021\046\022" +
    "\034\023\041\024\047\025\050\031\064\032\023\033\044" +
    "\034\012\035\052\045\025\050\013\062\055\063\063\064" +
    "\022\065\016\066\011\067\035\070\061\001\002\000\004" +
    "\006\231\001\002\000\046\004\uffbb\006\uffbb\010\uffbb\012" +
    "\uffbb\014\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\046\uffbb\047\uffbb\051\uffbb\053\uffbb\055" +
    "\uffbb\056\uffbb\001\002\000\070\005\021\007\042\011\007" +
    "\013\054\015\040\016\037\017\015\020\020\021\046\022" +
    "\034\023\041\024\047\025\050\031\064\032\023\033\044" +
    "\034\012\035\052\045\025\050\013\062\055\063\063\064" +
    "\022\065\016\066\011\067\035\070\061\001\002\000\004" +
    "\056\234\001\002\000\070\005\021\007\042\011\007\013" +
    "\054\015\040\016\037\017\015\020\020\021\046\022\034" +
    "\023\041\024\047\025\050\031\064\032\023\033\044\034" +
    "\012\035\052\045\025\050\013\062\055\063\063\064\022" +
    "\065\016\066\011\067\035\070\061\001\002\000\004\006" +
    "\236\001\002\000\046\004\uffab\006\uffab\010\uffab\012\uffab" +
    "\014\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\046\uffab\047\uffab\051\uffab\053\uffab\055\uffab" +
    "\056\uffab\001\002\000\070\005\021\007\042\011\007\013" +
    "\054\015\040\016\037\017\015\020\020\021\046\022\034" +
    "\023\041\024\047\025\050\031\064\032\023\033\044\034" +
    "\012\035\052\045\025\050\013\062\055\063\063\064\022" +
    "\065\016\066\011\067\035\070\061\001\002\000\004\006" +
    "\241\001\002\000\046\004\uffc0\006\uffc0\010\uffc0\012\uffc0" +
    "\014\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\046\uffc0\047\uffc0\051\uffc0\053\uffc0\055\uffc0" +
    "\056\uffc0\001\002\000\076\002\ufffd\005\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\045\ufffd\050\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070" +
    "\ufffd\001\002\000\030\004\uffe4\006\uffe4\010\uffe4\012\uffe4" +
    "\014\uffe4\043\uffe4\044\uffe4\051\uffe4\053\170\055\167\056" +
    "\uffe4\001\002\000\070\005\021\007\042\011\007\013\054" +
    "\015\040\016\037\017\015\020\020\021\046\022\034\023" +
    "\041\024\047\025\050\031\064\032\023\033\044\034\012" +
    "\035\052\045\025\050\013\062\055\063\063\064\022\065" +
    "\016\066\011\067\035\070\061\001\002\000\004\006\246" +
    "\001\002\000\046\004\uffc3\006\uffc3\010\uffc3\012\uffc3\014" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\046\uffc3\047\uffc3\051\uffc3\053\uffc3\055\uffc3\056" +
    "\uffc3\001\002\000\070\005\021\007\042\011\007\013\054" +
    "\015\040\016\037\017\015\020\020\021\046\022\034\023" +
    "\041\024\047\025\050\031\064\032\023\033\044\034\012" +
    "\035\052\045\025\050\013\062\055\063\063\064\022\065" +
    "\016\066\011\067\035\070\061\001\002\000\004\006\251" +
    "\001\002\000\046\004\uffc6\006\uffc6\010\uffc6\012\uffc6\014" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\046\uffc6\047\uffc6\051\uffc6\053\uffc6\055\uffc6\056" +
    "\uffc6\001\002\000\004\006\253\001\002\000\046\004\uffc5" +
    "\006\uffc5\010\uffc5\012\uffc5\014\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\047\uffc5" +
    "\051\uffc5\053\uffc5\055\uffc5\056\uffc5\001\002\000\070\005" +
    "\021\007\042\011\007\013\054\015\040\016\037\017\015" +
    "\020\020\021\046\022\034\023\041\024\047\025\050\031" +
    "\064\032\023\033\044\034\012\035\052\045\025\050\013" +
    "\062\055\063\063\064\022\065\016\066\011\067\035\070" +
    "\061\001\002\000\004\006\256\001\002\000\046\004\uffbe" +
    "\006\uffbe\010\uffbe\012\uffbe\014\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047\uffbe" +
    "\051\uffbe\053\uffbe\055\uffbe\056\uffbe\001\002\000\062\005" +
    "\021\011\007\013\054\015\040\016\037\017\015\020\020" +
    "\021\046\022\034\023\041\024\047\025\050\031\064\032" +
    "\023\033\044\034\012\050\013\062\055\063\107\064\022" +
    "\065\016\066\011\067\035\070\061\001\002\000\062\005" +
    "\021\011\007\013\054\015\040\016\037\017\015\020\020" +
    "\021\046\022\034\023\041\024\047\025\050\031\064\032" +
    "\023\033\044\034\012\050\013\062\055\063\107\064\022" +
    "\065\016\066\011\067\035\070\061\001\002\000\030\004" +
    "\uffe5\006\uffe5\010\uffe5\012\uffe5\014\uffe5\043\uffe5\044\uffe5" +
    "\051\uffe5\053\170\055\167\056\uffe5\001\002\000\030\004" +
    "\uffe6\006\uffe6\010\uffe6\012\uffe6\014\uffe6\043\uffe6\044\uffe6" +
    "\051\uffe6\053\170\055\167\056\uffe6\001\002\000\070\005" +
    "\021\007\042\011\007\013\054\015\040\016\037\017\015" +
    "\020\020\021\046\022\034\023\041\024\047\025\050\031" +
    "\064\032\023\033\044\034\012\035\052\045\025\050\013" +
    "\062\055\063\063\064\022\065\016\066\011\067\035\070" +
    "\061\001\002\000\004\006\265\001\002\000\046\004\uffbf" +
    "\006\uffbf\010\uffbf\012\uffbf\014\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\046\uffbf\047\uffbf" +
    "\051\uffbf\053\uffbf\055\uffbf\056\uffbf\001\002\000\046\004" +
    "\uffd5\006\uffd5\010\uffd5\012\uffd5\014\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5\047" +
    "\uffd5\051\uffd5\053\uffd5\055\uffd5\056\uffd5\001\002\000\004" +
    "\006\270\001\002\000\046\004\uffc1\006\uffc1\010\uffc1\012" +
    "\uffc1\014\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\046\uffc1\047\uffc1\051\uffc1\053\uffc1\055" +
    "\uffc1\056\uffc1\001\002\000\004\012\272\001\002\000\046" +
    "\004\uffb4\006\uffb4\010\uffb4\012\uffb4\014\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4" +
    "\047\uffb4\051\uffb4\053\uffb4\055\uffb4\056\uffb4\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\060\004\025\005\004\006\031\007\032\010" +
    "\061\011\016\012\050\013\044\014\065\015\035\016\057" +
    "\017\064\020\007\021\013\022\003\023\042\026\052\032" +
    "\030\033\023\034\005\040\026\041\056\043\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\004\025\005\004\006\077\007\032\010\061\011\016" +
    "\012\050\013\044\014\065\015\035\016\057\026\052\027" +
    "\075\030\270\032\030\033\023\034\005\040\026\041\056" +
    "\043\027\051\074\001\001\000\054\004\025\005\004\006" +
    "\031\007\032\010\061\011\016\012\050\013\044\014\065" +
    "\015\035\016\057\017\132\021\013\023\042\026\052\032" +
    "\030\033\023\034\005\040\026\041\056\043\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\004\016" +
    "\265\026\052\032\030\033\023\034\005\040\026\041\056" +
    "\043\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\004\025\005\004\006\247\007\032\010\061\011\016\012" +
    "\050\013\044\014\065\015\035\016\057\026\052\032\030" +
    "\033\023\034\005\040\026\041\056\043\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\004\010\061\012\242\013\044\014\065\015\035\016" +
    "\057\026\052\032\030\033\023\034\005\040\026\041\056" +
    "\043\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\004\025\005\004\006\077\007\032\010\061\011" +
    "\016\012\050\013\044\014\065\015\035\016\057\026\052" +
    "\027\217\032\030\033\023\034\005\040\026\041\056\043" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\004\025\005\004\006\137\007\032\010\061\011" +
    "\016\012\050\013\044\014\065\015\035\016\057\026\052" +
    "\032\030\033\023\034\005\035\141\036\140\037\142\040" +
    "\026\041\056\043\027\051\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\025\005\004\006\067\007\032\010\061\011\016\012\050" +
    "\013\044\014\065\015\035\016\057\026\052\032\030\033" +
    "\023\034\005\040\026\041\056\043\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\004\025\005\004\006" +
    "\077\007\032\010\061\011\016\012\050\013\044\014\065" +
    "\015\035\016\057\026\052\027\075\030\076\032\030\033" +
    "\023\034\005\040\026\041\056\043\027\051\074\001\001" +
    "\000\046\004\025\005\004\006\073\007\032\010\061\011" +
    "\016\012\050\013\044\014\065\015\035\016\057\026\052" +
    "\032\030\033\023\034\005\040\026\041\056\043\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\025\005\004\006\102\007\032\010\061\011\016" +
    "\012\050\013\044\014\065\015\035\016\057\026\052\032" +
    "\030\033\023\034\005\040\026\041\056\043\027\001\001" +
    "\000\002\001\001\000\030\005\004\014\065\015\115\016" +
    "\057\026\052\032\030\033\023\034\005\040\026\041\056" +
    "\043\027\001\001\000\030\005\004\014\065\015\105\016" +
    "\057\026\052\032\030\033\023\034\005\040\026\041\056" +
    "\043\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\004\014\114\016\057\026\052\032\030\033\023" +
    "\034\005\040\026\041\056\043\027\001\001\000\026\005" +
    "\004\014\113\016\057\026\052\032\030\033\023\034\005" +
    "\040\026\041\056\043\027\001\001\000\026\005\004\014" +
    "\112\016\057\026\052\032\030\033\023\034\005\040\026" +
    "\041\056\043\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\004\025" +
    "\005\004\006\117\007\032\010\061\011\016\012\050\013" +
    "\044\014\065\015\035\016\057\026\052\032\030\033\023" +
    "\034\005\040\026\041\056\043\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\123\025\124\051\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\004\025" +
    "\005\004\006\031\007\032\010\061\011\016\012\050\013" +
    "\044\014\065\015\035\016\057\017\064\020\130\021\013" +
    "\023\042\026\052\032\030\033\023\034\005\040\026\041" +
    "\056\043\027\001\001\000\054\004\025\005\004\006\031" +
    "\007\032\010\061\011\016\012\050\013\044\014\065\015" +
    "\035\016\057\017\132\021\013\023\042\026\052\032\030" +
    "\033\023\034\005\040\026\041\056\043\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\004\025\005\004\006\137\007" +
    "\032\010\061\011\016\012\050\013\044\014\065\015\035" +
    "\016\057\026\052\032\030\033\023\034\005\035\145\040" +
    "\026\041\056\043\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\025\005\004\006\153\007\032\010\061" +
    "\011\016\012\050\013\044\014\065\015\035\016\057\026" +
    "\052\032\030\033\023\034\005\040\026\041\056\043\027" +
    "\001\001\000\002\001\001\000\006\002\157\003\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\163\001\001\000\046\004\025\005\004\006" +
    "\162\007\032\010\061\011\016\012\050\013\044\014\065" +
    "\015\035\016\057\026\052\032\030\033\023\034\005\040" +
    "\026\041\056\043\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\004\025\005\004\006\165\007\032\010" +
    "\061\011\016\012\050\013\044\014\065\015\035\016\057" +
    "\026\052\032\030\033\023\034\005\040\026\041\056\043" +
    "\027\001\001\000\002\001\001\000\034\005\004\010\061" +
    "\013\175\014\065\015\035\016\057\026\052\032\030\033" +
    "\023\034\005\040\026\041\056\043\027\001\001\000\034" +
    "\005\004\010\061\013\170\014\065\015\035\016\057\026" +
    "\052\032\030\033\023\034\005\040\026\041\056\043\027" +
    "\001\001\000\002\001\001\000\032\005\004\010\174\014" +
    "\065\015\035\016\057\026\052\032\030\033\023\034\005" +
    "\040\026\041\056\043\027\001\001\000\032\005\004\010" +
    "\173\014\065\015\035\016\057\026\052\032\030\033\023" +
    "\034\005\040\026\041\056\043\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\004\025" +
    "\005\004\006\177\007\032\010\061\011\016\012\050\013" +
    "\044\014\065\015\035\016\057\026\052\032\030\033\023" +
    "\034\005\040\026\041\056\043\027\001\001\000\002\001" +
    "\001\000\046\004\025\005\004\006\201\007\032\010\061" +
    "\011\016\012\050\013\044\014\065\015\035\016\057\026" +
    "\052\032\030\033\023\034\005\040\026\041\056\043\027" +
    "\001\001\000\002\001\001\000\046\004\025\005\004\006" +
    "\203\007\032\010\061\011\016\012\050\013\044\014\065" +
    "\015\035\016\057\026\052\032\030\033\023\034\005\040" +
    "\026\041\056\043\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\004\025\005\004\006\206\007\032\010" +
    "\061\011\016\012\050\013\044\014\065\015\035\016\057" +
    "\026\052\032\030\033\023\034\005\040\026\041\056\043" +
    "\027\001\001\000\002\001\001\000\046\004\025\005\004" +
    "\006\210\007\032\010\061\011\016\012\050\013\044\014" +
    "\065\015\035\016\057\026\052\032\030\033\023\034\005" +
    "\040\026\041\056\043\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\004\025\005\004\006\077\007\032" +
    "\010\061\011\016\012\050\013\044\014\065\015\035\016" +
    "\057\026\052\027\075\030\213\032\030\033\023\034\005" +
    "\040\026\041\056\043\027\051\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\004\025\005" +
    "\004\006\222\007\032\010\061\011\016\012\050\013\044" +
    "\014\065\015\035\016\057\026\052\032\030\033\023\034" +
    "\005\040\026\041\056\043\027\001\001\000\002\001\001" +
    "\000\046\004\025\005\004\006\224\007\032\010\061\011" +
    "\016\012\050\013\044\014\065\015\035\016\057\026\052" +
    "\032\030\033\023\034\005\040\026\041\056\043\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\004\025" +
    "\005\004\006\227\007\032\010\061\011\016\012\050\013" +
    "\044\014\065\015\035\016\057\026\052\032\030\033\023" +
    "\034\005\040\026\041\056\043\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\025\005\004\006\232" +
    "\007\032\010\061\011\016\012\050\013\044\014\065\015" +
    "\035\016\057\026\052\032\030\033\023\034\005\040\026" +
    "\041\056\043\027\001\001\000\002\001\001\000\046\004" +
    "\025\005\004\006\234\007\032\010\061\011\016\012\050" +
    "\013\044\014\065\015\035\016\057\026\052\032\030\033" +
    "\023\034\005\040\026\041\056\043\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\025\005\004\006" +
    "\237\007\032\010\061\011\016\012\050\013\044\014\065" +
    "\015\035\016\057\026\052\032\030\033\023\034\005\040" +
    "\026\041\056\043\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\025\005\004\006\244\007\032\010\061\011\016\012\050" +
    "\013\044\014\065\015\035\016\057\026\052\032\030\033" +
    "\023\034\005\040\026\041\056\043\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\025\005\004\006" +
    "\251\007\032\010\061\011\016\012\050\013\044\014\065" +
    "\015\035\016\057\026\052\032\030\033\023\034\005\040" +
    "\026\041\056\043\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\025\005\004\006\254\007\032\010\061\011\016\012\050" +
    "\013\044\014\065\015\035\016\057\026\052\032\030\033" +
    "\023\034\005\040\026\041\056\043\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\004\010\061\012" +
    "\261\013\044\014\065\015\035\016\057\026\052\032\030" +
    "\033\023\034\005\040\026\041\056\043\027\001\001\000" +
    "\036\005\004\010\061\012\260\013\044\014\065\015\035" +
    "\016\057\026\052\032\030\033\023\034\005\040\026\041" +
    "\056\043\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\004\025\005\004\006\263\007\032\010\061\011" +
    "\016\012\050\013\044\014\065\015\035\016\057\026\052" +
    "\032\030\033\023\034\005\040\026\041\056\043\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


	   Lexer lexer;

	   public SmplParser(Lexer l) {
	   		  super(l);
			  lexer = l;
	   }

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
							 " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
							   	 lexer.getText());
		}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action_part00000000(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StatementSequence seq = (StatementSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(seq); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StatementSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StatementSequence seq = (StatementSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = seq.add(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StatementSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StatementSequence(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StatementDefinition d = (StatementDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= funcDefn 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtFuncDefinition f = (StmtFuncDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cmpExp ::= expression COND expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmpExp",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cmpExp ::= expression EQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmpExp",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcDefn ::= DEF VAR PROC LPAREN paramListE RPAREN LBRACE stmtList RBRACE 
            {
              StmtFuncDefinition RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		ArrayList<String> pList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StatementSequence seq = (StatementSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new StmtFuncDefinition(var, pList, seq); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("funcDefn",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-8)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<String> pList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = pList; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListE",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListE",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<String> seq = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 seq.add(v); RESULT = seq; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
					ArrayList<String> result = new ArrayList<>();
					result.add(v);
					RESULT = result;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // definition ::= DEF VAR expression SEMI 
            {
              StatementDefinition RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new StatementDefinition(var, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcCall ::= VAR LPAREN argListE RPAREN 
            {
              ExpFuncCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpFuncCall(v, aList); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("funcCall",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argList ::= argList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Exp> seq = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 seq.add(e); RESULT = seq; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
					ArrayList<Exp> result = new ArrayList<>();
					result.add(e);
					RESULT = result;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = aList; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argListE",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList<Exp>(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argListE",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool ::= TRUE 
            {
              ExpLit RESULT =null;
		 RESULT = new ExpLit(true, "smpl-boolean"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bool",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool ::= FALSE 
            {
              ExpLit RESULT =null;
		 RESULT = new ExpLit(false, "smpl-boolean"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bool",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= boolExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expSeq 
            {
              Exp RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp seq = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = seq; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= VAR ASSIGN expression 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpAssign(var, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= let 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp le = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = le; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expSeq ::= LBRACE argList RBRACE 
            {
              Exp RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> seq = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpSeq(seq); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expSeq",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolExp ::= boolExp AND cmp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpAnd(b, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolExp",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolExp ::= boolExp OR cmp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpOr(b, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolExp",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolExp ::= NOT cmp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpNot(c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolExp",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolExp ::= cmp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolExp",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cmp ::= cmp COND bitwise 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpCmp(cond, c, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cmp ::= bitwise 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cmp ::= cmp EQUAL bitwise 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpCmp("EQUAL", c, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bitwise ::= bitwise BIT_AND addSub 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpBitAnd(b, t);
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitwise",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bitwise ::= bitwise BIT_OR addSub 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpBitOr(b, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitwise",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bitwise ::= addSub 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitwise",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // addSub ::= addSub PLUS term 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpAdd(a, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("addSub",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // addSub ::= addSub MINUS term 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpSub(a, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("addSub",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // addSub ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("addSub",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= term MUL bitNot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term ::= term DIV bitNot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpDiv(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= term MOD bitNot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMod(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= bitNot 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bitNot ::= BIT_NOT factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpBitNot(f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitNot",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bitNot ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitNot",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= funcCall 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpFuncCall f = (ExpFuncCall)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= INT 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(v, "smpl-integer"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= DOUBLE 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(v, "smpl-double"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(c, "smpl-character"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(s, "smpl-string"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= bool 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpLit b = (ExpLit)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= ops 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpOps o = (ExpOps)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = o; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= print 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= LPAREN MINUS expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // print ::= PRINT LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpPrint(exp); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // print ::= PRINTLN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpPrintln(exp); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // read ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("read",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // read ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpReadInt(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("read",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ops ::= SIZE LPAREN expression RPAREN 
            {
              ExpOps RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("size", e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ops ::= CAR LPAREN expression RPAREN 
            {
              ExpOps RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("car", e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ops ::= CDR LPAREN expression RPAREN 
            {
              ExpOps RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("cdr", e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ops ::= EQV LPAREN expression COMMA expression RPAREN 
            {
              ExpOps RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("eqv", e1, e2); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ops ::= EQL LPAREN expression COMMA expression RPAREN 
            {
              ExpOps RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("equ", e1, e2); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ops ::= IS_PAIR LPAREN expression RPAREN 
            {
              ExpOps RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("is-pair", e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ops ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              ExpOps RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp end = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("substr", s, start, end); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // let ::= LET LPAREN bindList RPAREN expression 
            {
              Exp RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLet(blst,body); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("let",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bind ::= VAR EQUAL expression 
            {
              ExpBind RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpBind(v,e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bind",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bindList ::= bindList COMMA bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 blst.add(b);
			RESULT = blst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bindList ::= bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				ArrayList<ExpBind> result = new ArrayList<>();
				result.add(b); 
				RESULT = result;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bindList ::= 
            {
              ArrayList<ExpBind> RESULT =null;
		 ArrayList<ExpBind> result = new ArrayList<>();
				RESULT = result; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // list ::= LBRACKET argListE RBRACKET 
            {
              Exp RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpLit(aList, "smpl-list"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // list ::= LIST LPAREN argListE RPAREN 
            {
              Exp RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpLit(aList, "smpl-list"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // vector ::= LB_COLON subVectorListE RB_COLON 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> v = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpLit(v, "smpl-vector"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vector",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // subVectorListE ::= subVectorList 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> v = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subVectorListE",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // subVectorListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList<Exp>(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subVectorListE",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // subVectorList ::= subVectorList COMMA subVector 
            {
              ArrayList<Exp> RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Exp> seq = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpVectorParam e = (ExpVectorParam)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 seq.add(e); RESULT = seq; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subVectorList",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // subVectorList ::= subVector 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpVectorParam e = (ExpVectorParam)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				  	 ArrayList<Exp> r = new ArrayList<>();
					 r.add(e);
					 RESULT = r;
				  
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subVectorList",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // subVector ::= expression 
            {
              ExpVectorParam RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpVectorParam(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subVector",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // subVector ::= expression COLON PROC LPAREN VAR RPAREN expression 
            {
              ExpVectorParam RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int evalleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int evalright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp eval = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpVectorParam(n, v, eval); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subVector",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			ArrayList<Exp> r = new ArrayList<Exp>();
			r.add(e1);
			r.add(e2);
			RESULT = new ExpLit(r, "smpl-pair");
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pair",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SmplParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
              return CUP$SmplParser$do_action_part00000000(
                               CUP$SmplParser$act_num,
                               CUP$SmplParser$parser,
                               CUP$SmplParser$stack,
                               CUP$SmplParser$top);
    }
}

}
