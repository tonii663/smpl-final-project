
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SmplParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\013\003\000\002\002\004\000\002\011" +
    "\004\000\002\011\003\000\002\010\004\000\002\010\003" +
    "\000\002\010\003\000\002\014\013\000\002\016\003\000" +
    "\002\016\003\000\002\015\005\000\002\015\003\000\002" +
    "\012\006\000\002\003\005\000\002\003\005\000\002\003" +
    "\003\000\002\017\006\000\002\020\005\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\002\003\000" +
    "\002\002\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\005\000\002\007\006\000\002\030\006\000\002" +
    "\030\006\000\002\027\006\000\002\027\006\000\002\027" +
    "\006\000\002\027\010\000\002\027\010\000\002\027\006" +
    "\000\002\023\005\000\002\023\006\000\002\025\005\000" +
    "\002\024\010\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\052\004\017\010\007\012\041\014\032\015" +
    "\031\016\013\017\016\020\035\021\026\022\033\023\036" +
    "\025\042\030\047\031\021\057\046\060\020\061\014\062" +
    "\011\063\027\064\045\001\002\000\004\002\213\001\002" +
    "\000\046\005\uffd8\011\uffd8\013\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\045\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\001" +
    "\002\000\046\005\uffd6\011\uffd6\013\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\045\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6" +
    "\001\002\000\052\004\017\010\007\011\uffc3\012\041\014" +
    "\032\015\031\016\013\017\016\020\035\021\026\022\033" +
    "\023\036\030\047\031\021\057\053\060\020\061\014\062" +
    "\011\063\027\064\045\001\002\000\054\002\001\004\017" +
    "\010\007\012\041\014\032\015\031\016\013\017\016\020" +
    "\035\021\026\022\033\023\036\025\042\030\047\031\021" +
    "\057\046\060\020\061\014\062\011\063\027\064\045\001" +
    "\002\000\046\005\uffd9\011\uffd9\013\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\045\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9" +
    "\001\002\000\056\002\ufffc\004\ufffc\007\ufffc\010\ufffc\012" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\025\ufffc\030\ufffc\031\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\001\002\000\004" +
    "\004\206\001\002\000\046\005\uffda\011\uffda\013\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\055" +
    "\uffda\056\uffda\001\002\000\024\005\ufff2\011\ufff2\013\ufff2" +
    "\032\ufff2\033\ufff2\037\202\040\203\045\ufff2\056\ufff2\001" +
    "\002\000\004\004\177\001\002\000\052\004\017\010\007" +
    "\012\041\014\032\015\031\016\013\017\016\020\035\021" +
    "\026\022\033\023\036\030\047\031\021\033\173\057\053" +
    "\060\020\061\014\062\011\063\027\064\045\001\002\000" +
    "\046\005\uffdb\011\uffdb\013\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\045\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\001\002" +
    "\000\004\004\167\001\002\000\046\005\uffd7\011\uffd7\013" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\055\uffd7\056\uffd7\001\002\000\046\005\uffd4\011\uffd4" +
    "\013\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\055\uffd4\056\uffd4\001\002\000\046\005\uffd5\011" +
    "\uffd5\013\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\055\uffd5\056\uffd5\001\002\000\010\032\061" +
    "\033\062\045\166\001\002\000\004\004\163\001\002\000" +
    "\046\005\uffec\011\uffec\013\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\045\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\055\uffec\056\uffec\001\002" +
    "\000\046\005\uffe1\011\uffe1\013\uffe1\032\uffe1\033\uffe1\034" +
    "\065\035\066\036\064\037\uffe1\040\uffe1\045\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1\056\uffe1\001" +
    "\002\000\004\004\156\001\002\000\004\004\153\001\002" +
    "\000\004\004\146\001\002\000\056\002\ufffb\004\ufffb\007" +
    "\ufffb\010\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\025\ufffb\030\ufffb\031" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\001\002\000\004\004\143\001\002\000\004\004\136\001" +
    "\002\000\040\005\uffe8\011\uffe8\013\uffe8\032\uffe8\033\uffe8" +
    "\037\uffe8\040\uffe8\045\uffe8\047\123\050\122\051\126\052" +
    "\125\053\127\055\124\056\uffe8\001\002\000\046\005\uffdc" +
    "\011\uffdc\013\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\055\uffdc\056\uffdc\001\002\000\052\004" +
    "\017\010\007\012\041\013\uffc3\014\032\015\031\016\013" +
    "\017\016\020\035\021\026\022\033\023\036\030\047\031" +
    "\021\057\053\060\020\061\014\062\011\063\027\064\045" +
    "\001\002\000\004\057\102\001\002\000\046\005\uffd3\011" +
    "\uffd3\013\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\055\uffd3\056\uffd3\001\002\000\046\005\uffdd" +
    "\011\uffdd\013\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\055\uffdd\056\uffdd\001\002\000\046\005" +
    "\uffeb\011\uffeb\013\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\045\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\055\uffeb\056\uffeb\001\002\000\042" +
    "\004\054\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\077\055\uffd2\001\002\000\004\004\051\001" +
    "\002\000\056\002\ufffe\004\ufffe\007\ufffe\010\ufffe\012\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\025\ufffe\030\ufffe\031\ufffe\057\ufffe\060\ufffe" +
    "\061\ufffe\062\ufffe\063\ufffe\064\ufffe\001\002\000\050\004" +
    "\017\010\007\012\041\014\032\015\031\016\013\017\016" +
    "\020\035\021\026\022\033\023\036\030\047\031\021\057" +
    "\053\060\020\061\014\062\011\063\027\064\045\001\002" +
    "\000\010\005\076\032\061\033\062\001\002\000\050\004" +
    "\054\005\uffd2\011\uffd2\013\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2\001\002" +
    "\000\052\004\017\005\uffc3\010\007\012\041\014\032\015" +
    "\031\016\013\017\016\020\035\021\026\022\033\023\036" +
    "\030\047\031\021\057\053\060\020\061\014\062\011\063" +
    "\027\064\045\001\002\000\004\005\075\001\002\000\012" +
    "\005\uffee\011\uffee\013\uffee\056\073\001\002\000\010\005" +
    "\uffed\011\uffed\013\uffed\001\002\000\016\005\uffef\011\uffef" +
    "\013\uffef\032\061\033\062\056\uffef\001\002\000\050\004" +
    "\017\010\007\012\041\014\032\015\031\016\013\017\016" +
    "\020\035\021\026\022\033\023\036\030\047\031\021\057" +
    "\053\060\020\061\014\062\011\063\027\064\045\001\002" +
    "\000\050\004\017\010\007\012\041\014\032\015\031\016" +
    "\013\017\016\020\035\021\026\022\033\023\036\030\047" +
    "\031\021\057\053\060\020\061\014\062\011\063\027\064" +
    "\045\001\002\000\026\005\ufff3\011\ufff3\013\ufff3\032\ufff3" +
    "\033\ufff3\034\065\035\066\036\064\045\ufff3\056\ufff3\001" +
    "\002\000\050\004\017\010\007\012\041\014\032\015\031" +
    "\016\013\017\016\020\035\021\026\022\033\023\036\030" +
    "\047\031\021\057\053\060\020\061\014\062\011\063\027" +
    "\064\045\001\002\000\050\004\017\010\007\012\041\014" +
    "\032\015\031\016\013\017\016\020\035\021\026\022\033" +
    "\023\036\030\047\031\021\057\053\060\020\061\014\062" +
    "\011\063\027\064\045\001\002\000\050\004\017\010\007" +
    "\012\041\014\032\015\031\016\013\017\016\020\035\021" +
    "\026\022\033\023\036\030\047\031\021\057\053\060\020" +
    "\061\014\062\011\063\027\064\045\001\002\000\046\005" +
    "\uffdf\011\uffdf\013\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\045\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf\001\002\000\046" +
    "\005\uffe0\011\uffe0\013\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\045\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0\001\002\000" +
    "\046\005\uffde\011\uffde\013\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\045\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\055\uffde\056\uffde\001\002" +
    "\000\026\005\ufff4\011\ufff4\013\ufff4\032\ufff4\033\ufff4\034" +
    "\065\035\066\036\064\045\ufff4\056\ufff4\001\002\000\050" +
    "\004\017\010\007\012\041\014\032\015\031\016\013\017" +
    "\016\020\035\021\026\022\033\023\036\030\047\031\021" +
    "\057\053\060\020\061\014\062\011\063\027\064\045\001" +
    "\002\000\016\005\ufff0\011\ufff0\013\ufff0\032\061\033\062" +
    "\056\ufff0\001\002\000\046\005\ufff1\011\ufff1\013\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\055" +
    "\ufff1\056\ufff1\001\002\000\046\005\uffcf\011\uffcf\013\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\055\uffcf\056\uffcf\001\002\000\050\004\017\010\007\012" +
    "\041\014\032\015\031\016\013\017\016\020\035\021\026" +
    "\022\033\023\036\030\047\031\021\057\053\060\020\061" +
    "\014\062\011\063\027\064\045\001\002\000\010\032\061" +
    "\033\062\045\101\001\002\000\056\002\ufff5\004\ufff5\007" +
    "\ufff5\010\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\030\ufff5\031" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\001\002\000\004\026\103\001\002\000\004\004\104\001" +
    "\002\000\006\005\uffc3\057\105\001\002\000\006\005\ufff6" +
    "\056\ufff6\001\002\000\006\005\ufff9\056\116\001\002\000" +
    "\004\005\111\001\002\000\004\005\ufff8\001\002\000\004" +
    "\006\112\001\002\000\052\004\017\010\007\012\041\014" +
    "\032\015\031\016\013\017\016\020\035\021\026\022\033" +
    "\023\036\025\042\030\047\031\021\057\046\060\020\061" +
    "\014\062\011\063\027\064\045\001\002\000\054\004\017" +
    "\007\114\010\007\012\041\014\032\015\031\016\013\017" +
    "\016\020\035\021\026\022\033\023\036\025\042\030\047" +
    "\031\021\057\046\060\020\061\014\062\011\063\027\064" +
    "\045\001\002\000\056\002\ufffa\004\ufffa\007\ufffa\010\ufffa" +
    "\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\025\ufffa\030\ufffa\031\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\001\002\000" +
    "\056\002\uffff\004\uffff\007\uffff\010\uffff\012\uffff\014\uffff" +
    "\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023" +
    "\uffff\025\uffff\030\uffff\031\uffff\057\uffff\060\uffff\061\uffff" +
    "\062\uffff\063\uffff\064\uffff\001\002\000\004\057\117\001" +
    "\002\000\006\005\ufff7\056\ufff7\001\002\000\004\013\121" +
    "\001\002\000\046\005\uffc5\011\uffc5\013\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\045\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5\056" +
    "\uffc5\001\002\000\050\004\017\010\007\012\041\014\032" +
    "\015\031\016\013\017\016\020\035\021\026\022\033\023" +
    "\036\030\047\031\021\057\053\060\020\061\014\062\011" +
    "\063\027\064\045\001\002\000\050\004\017\010\007\012" +
    "\041\014\032\015\031\016\013\017\016\020\035\021\026" +
    "\022\033\023\036\030\047\031\021\057\053\060\020\061" +
    "\014\062\011\063\027\064\045\001\002\000\050\004\017" +
    "\010\007\012\041\014\032\015\031\016\013\017\016\020" +
    "\035\021\026\022\033\023\036\030\047\031\021\057\053" +
    "\060\020\061\014\062\011\063\027\064\045\001\002\000" +
    "\050\004\017\010\007\012\041\014\032\015\031\016\013" +
    "\017\016\020\035\021\026\022\033\023\036\030\047\031" +
    "\021\057\053\060\020\061\014\062\011\063\027\064\045" +
    "\001\002\000\050\004\017\010\007\012\041\014\032\015" +
    "\031\016\013\017\016\020\035\021\026\022\033\023\036" +
    "\030\047\031\021\057\053\060\020\061\014\062\011\063" +
    "\027\064\045\001\002\000\050\004\017\010\007\012\041" +
    "\014\032\015\031\016\013\017\016\020\035\021\026\022" +
    "\033\023\036\030\047\031\021\057\053\060\020\061\014" +
    "\062\011\063\027\064\045\001\002\000\046\005\uffe3\011" +
    "\uffe3\013\uffe3\032\uffe3\033\uffe3\034\065\035\066\036\064" +
    "\037\uffe3\040\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\055\uffe3\056\uffe3\001\002\000\046\005\uffe5" +
    "\011\uffe5\013\uffe5\032\uffe5\033\uffe5\034\065\035\066\036" +
    "\064\037\uffe5\040\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\055\uffe5\056\uffe5\001\002\000\046\005" +
    "\uffe4\011\uffe4\013\uffe4\032\uffe4\033\uffe4\034\065\035\066" +
    "\036\064\037\uffe4\040\uffe4\045\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\053\uffe4\055\uffe4\056\uffe4\001\002\000\046" +
    "\005\uffe2\011\uffe2\013\uffe2\032\uffe2\033\uffe2\034\065\035" +
    "\066\036\064\037\uffe2\040\uffe2\045\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\001\002\000" +
    "\046\005\uffe7\011\uffe7\013\uffe7\032\uffe7\033\uffe7\034\065" +
    "\035\066\036\064\037\uffe7\040\uffe7\045\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\056\uffe7\001\002" +
    "\000\046\005\uffe6\011\uffe6\013\uffe6\032\uffe6\033\uffe6\034" +
    "\065\035\066\036\064\037\uffe6\040\uffe6\045\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6\001" +
    "\002\000\050\004\017\010\007\012\041\014\032\015\031" +
    "\016\013\017\016\020\035\021\026\022\033\023\036\030" +
    "\047\031\021\057\053\060\020\061\014\062\011\063\027" +
    "\064\045\001\002\000\010\032\061\033\062\056\140\001" +
    "\002\000\050\004\017\010\007\012\041\014\032\015\031" +
    "\016\013\017\016\020\035\021\026\022\033\023\036\030" +
    "\047\031\021\057\053\060\020\061\014\062\011\063\027" +
    "\064\045\001\002\000\010\005\142\032\061\033\062\001" +
    "\002\000\046\005\uffc9\011\uffc9\013\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\045\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9" +
    "\001\002\000\052\004\017\005\uffc3\010\007\012\041\014" +
    "\032\015\031\016\013\017\016\020\035\021\026\022\033" +
    "\023\036\030\047\031\021\057\053\060\020\061\014\062" +
    "\011\063\027\064\045\001\002\000\004\005\145\001\002" +
    "\000\046\005\uffc6\011\uffc6\013\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\045\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\001" +
    "\002\000\050\004\017\010\007\012\041\014\032\015\031" +
    "\016\013\017\016\020\035\021\026\022\033\023\036\030" +
    "\047\031\021\057\053\060\020\061\014\062\011\063\027" +
    "\064\045\001\002\000\010\032\061\033\062\056\150\001" +
    "\002\000\050\004\017\010\007\012\041\014\032\015\031" +
    "\016\013\017\016\020\035\021\026\022\033\023\036\030" +
    "\047\031\021\057\053\060\020\061\014\062\011\063\027" +
    "\064\045\001\002\000\010\005\152\032\061\033\062\001" +
    "\002\000\046\005\uffca\011\uffca\013\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\045\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056\uffca" +
    "\001\002\000\050\004\017\010\007\012\041\014\032\015" +
    "\031\016\013\017\016\020\035\021\026\022\033\023\036" +
    "\030\047\031\021\057\053\060\020\061\014\062\011\063" +
    "\027\064\045\001\002\000\010\005\155\032\061\033\062" +
    "\001\002\000\046\005\uffc8\011\uffc8\013\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\045\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8\056" +
    "\uffc8\001\002\000\050\004\017\010\007\012\041\014\032" +
    "\015\031\016\013\017\016\020\035\021\026\022\033\023" +
    "\036\030\047\031\021\057\053\060\020\061\014\062\011" +
    "\063\027\064\045\001\002\000\010\032\061\033\062\056" +
    "\160\001\002\000\050\004\017\010\007\012\041\014\032" +
    "\015\031\016\013\017\016\020\035\021\026\022\033\023" +
    "\036\030\047\031\021\057\053\060\020\061\014\062\011" +
    "\063\027\064\045\001\002\000\010\005\162\032\061\033" +
    "\062\001\002\000\046\005\uffc4\011\uffc4\013\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\045" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4" +
    "\056\uffc4\001\002\000\050\004\017\010\007\012\041\014" +
    "\032\015\031\016\013\017\016\020\035\021\026\022\033" +
    "\023\036\030\047\031\021\057\053\060\020\061\014\062" +
    "\011\063\027\064\045\001\002\000\010\005\165\032\061" +
    "\033\062\001\002\000\046\005\uffcd\011\uffcd\013\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\055" +
    "\uffcd\056\uffcd\001\002\000\056\002\ufffd\004\ufffd\007\ufffd" +
    "\010\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd\030\ufffd\031\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\001" +
    "\002\000\050\004\017\010\007\012\041\014\032\015\031" +
    "\016\013\017\016\020\035\021\026\022\033\023\036\030" +
    "\047\031\021\057\053\060\020\061\014\062\011\063\027" +
    "\064\045\001\002\000\010\005\171\032\061\033\062\001" +
    "\002\000\046\005\uffce\011\uffce\013\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\045\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\055\uffce\056\uffce" +
    "\001\002\000\010\005\176\032\061\033\062\001\002\000" +
    "\050\004\017\010\007\012\041\014\032\015\031\016\013" +
    "\017\016\020\035\021\026\022\033\023\036\030\047\031" +
    "\021\057\053\060\020\061\014\062\011\063\027\064\045" +
    "\001\002\000\010\005\175\032\061\033\062\001\002\000" +
    "\046\005\uffd0\011\uffd0\013\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0\001\002" +
    "\000\046\005\uffd1\011\uffd1\013\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\045\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\001" +
    "\002\000\050\004\017\010\007\012\041\014\032\015\031" +
    "\016\013\017\016\020\035\021\026\022\033\023\036\030" +
    "\047\031\021\057\053\060\020\061\014\062\011\063\027" +
    "\064\045\001\002\000\010\005\201\032\061\033\062\001" +
    "\002\000\046\005\uffcb\011\uffcb\013\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\045\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb" +
    "\001\002\000\050\004\017\010\007\012\041\014\032\015" +
    "\031\016\013\017\016\020\035\021\026\022\033\023\036" +
    "\030\047\031\021\057\053\060\020\061\014\062\011\063" +
    "\027\064\045\001\002\000\050\004\017\010\007\012\041" +
    "\014\032\015\031\016\013\017\016\020\035\021\026\022" +
    "\033\023\036\030\047\031\021\057\053\060\020\061\014" +
    "\062\011\063\027\064\045\001\002\000\032\005\uffe9\011" +
    "\uffe9\013\uffe9\032\uffe9\033\uffe9\034\065\035\066\036\064" +
    "\037\uffe9\040\uffe9\045\uffe9\056\uffe9\001\002\000\032\005" +
    "\uffea\011\uffea\013\uffea\032\uffea\033\uffea\034\065\035\066" +
    "\036\064\037\uffea\040\uffea\045\uffea\056\uffea\001\002\000" +
    "\050\004\017\010\007\012\041\014\032\015\031\016\013" +
    "\017\016\020\035\021\026\022\033\023\036\030\047\031" +
    "\021\057\053\060\020\061\014\062\011\063\027\064\045" +
    "\001\002\000\010\005\210\032\061\033\062\001\002\000" +
    "\046\005\uffcc\011\uffcc\013\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\045\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc\001\002" +
    "\000\004\011\212\001\002\000\046\005\uffc7\011\uffc7\013" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\055\uffc7\056\uffc7\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\044\002\004\003\024\004\014\005\036\006" +
    "\027\007\043\010\047\011\007\012\011\013\003\014\033" +
    "\017\037\023\023\024\021\025\005\027\022\030\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\004\003\057\004\014\005\036\006\027\007" +
    "\043\017\037\020\055\021\210\023\023\024\021\025\005" +
    "\027\022\030\042\032\056\001\001\000\040\002\004\003" +
    "\024\004\014\005\036\006\027\007\043\010\114\012\011" +
    "\014\033\017\037\023\023\024\021\025\005\027\022\030" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\004\003\171\004\014\005\036\006\027" +
    "\007\043\017\037\023\023\024\021\025\005\027\022\030" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\004\003\057\004" +
    "\014\005\036\006\027\007\043\017\037\020\055\021\117" +
    "\023\023\024\021\025\005\027\022\030\042\032\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\004\003\051\004\014\005\036" +
    "\006\027\007\043\017\037\023\023\024\021\025\005\027" +
    "\022\030\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\004\003\057\004\014\005\036\006\027\007" +
    "\043\017\037\020\055\021\054\023\023\024\021\025\005" +
    "\027\022\030\042\032\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\004\006\071\007\043\017\037\023\023\024\021\025" +
    "\005\027\022\030\042\001\001\000\024\002\004\006\062" +
    "\007\043\017\037\023\023\024\021\025\005\027\022\030" +
    "\042\001\001\000\002\001\001\000\022\002\004\007\070" +
    "\017\037\023\023\024\021\025\005\027\022\030\042\001" +
    "\001\000\022\002\004\007\067\017\037\023\023\024\021" +
    "\025\005\027\022\030\042\001\001\000\022\002\004\007" +
    "\066\017\037\023\023\024\021\025\005\027\022\030\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\004\003\073\004\014" +
    "\005\036\006\027\007\043\017\037\023\023\024\021\025" +
    "\005\027\022\030\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\004\003\077\004" +
    "\014\005\036\006\027\007\043\017\037\023\023\024\021" +
    "\025\005\027\022\030\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\105\016\106\032\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\004\003\024\004\014\005\036\006" +
    "\027\007\043\010\047\011\112\012\011\014\033\017\037" +
    "\023\023\024\021\025\005\027\022\030\042\001\001\000" +
    "\040\002\004\003\024\004\014\005\036\006\027\007\043" +
    "\010\114\012\011\014\033\017\037\023\023\024\021\025" +
    "\005\027\022\030\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\004\006\134\007\043" +
    "\017\037\023\023\024\021\025\005\027\022\030\042\001" +
    "\001\000\024\002\004\006\133\007\043\017\037\023\023" +
    "\024\021\025\005\027\022\030\042\001\001\000\024\002" +
    "\004\006\132\007\043\017\037\023\023\024\021\025\005" +
    "\027\022\030\042\001\001\000\024\002\004\006\131\007" +
    "\043\017\037\023\023\024\021\025\005\027\022\030\042" +
    "\001\001\000\024\002\004\006\130\007\043\017\037\023" +
    "\023\024\021\025\005\027\022\030\042\001\001\000\024" +
    "\002\004\006\127\007\043\017\037\023\023\024\021\025" +
    "\005\027\022\030\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\004\003\136\004\014" +
    "\005\036\006\027\007\043\017\037\023\023\024\021\025" +
    "\005\027\022\030\042\001\001\000\002\001\001\000\032" +
    "\002\004\003\140\004\014\005\036\006\027\007\043\017" +
    "\037\023\023\024\021\025\005\027\022\030\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\004\003" +
    "\057\004\014\005\036\006\027\007\043\017\037\020\055" +
    "\021\143\023\023\024\021\025\005\027\022\030\042\032" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\004\003\146\004\014\005\036\006\027\007\043\017" +
    "\037\023\023\024\021\025\005\027\022\030\042\001\001" +
    "\000\002\001\001\000\032\002\004\003\150\004\014\005" +
    "\036\006\027\007\043\017\037\023\023\024\021\025\005" +
    "\027\022\030\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\004\003\153\004\014\005\036\006\027" +
    "\007\043\017\037\023\023\024\021\025\005\027\022\030" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\004\003\156\004\014\005\036\006\027\007\043\017" +
    "\037\023\023\024\021\025\005\027\022\030\042\001\001" +
    "\000\002\001\001\000\032\002\004\003\160\004\014\005" +
    "\036\006\027\007\043\017\037\023\023\024\021\025\005" +
    "\027\022\030\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\004\003\163\004\014\005\036\006\027" +
    "\007\043\017\037\023\023\024\021\025\005\027\022\030" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\004\003\167\004\014\005\036\006" +
    "\027\007\043\017\037\023\023\024\021\025\005\027\022" +
    "\030\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\004\003\173\004\014\005\036" +
    "\006\027\007\043\017\037\023\023\024\021\025\005\027" +
    "\022\030\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\004\003\177\004\014\005" +
    "\036\006\027\007\043\017\037\023\023\024\021\025\005" +
    "\027\022\030\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\004\006\204\007\043\017\037\023\023" +
    "\024\021\025\005\027\022\030\042\001\001\000\024\002" +
    "\004\006\203\007\043\017\037\023\023\024\021\025\005" +
    "\027\022\030\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\004\003\206\004\014\005\036\006\027" +
    "\007\043\017\037\023\023\024\021\025\005\027\022\030" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


	   Lexer lexer;

	   public SmplParser(Lexer l) {
	   		  super(l);
			  lexer = l;
	   }

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
							 " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
							   	 lexer.getText());
		}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action_part00000000(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StatementSequence seq = (StatementSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(seq); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StatementSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StatementSequence seq = (StatementSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = seq.add(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StatementSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StatementSequence(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StatementDefinition d = (StatementDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= funcDefn 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtFuncDefinition f = (StmtFuncDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcDefn ::= DEF VAR PROC LPAREN paramListE RPAREN LBRACE stmtList RBRACE 
            {
              StmtFuncDefinition RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		ArrayList<String> pList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StatementSequence seq = (StatementSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new StmtFuncDefinition(var, pList, seq); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("funcDefn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-8)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<String> pList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = pList; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListE",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListE",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<String> seq = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 seq.add(v); RESULT = seq; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
					ArrayList<String> result = new ArrayList<>();
					result.add(v);
					RESULT = result;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definition ::= VAR ASSIGN expression SEMI 
            {
              StatementDefinition RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new StatementDefinition(var, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpAdd(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpSub(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= boolExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcCall ::= VAR LPAREN argListE RPAREN 
            {
              ExpFuncCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpFuncCall(v, aList); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("funcCall",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argList ::= argList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Exp> seq = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 seq.add(e); RESULT = seq; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
					ArrayList<Exp> result = new ArrayList<>();
					result.add(e);
					RESULT = result;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = aList; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argListE",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList<Exp>(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argListE",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool ::= TRUE 
            {
              ExpLit RESULT =null;
		 RESULT = new ExpLit(true, "smpl-boolean"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bool",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool ::= FALSE 
            {
              ExpLit RESULT =null;
		 RESULT = new ExpLit(false, "smpl-boolean"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bool",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolExp ::= boolExp AND term 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpAnd(b, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolExp",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolExp ::= boolExp OR term 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpOr(b, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolExp",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolExp ::= cmp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolExp",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cmp ::= cmp GT term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpCmp("GT", c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cmp ::= cmp LT term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpCmp("LT", c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cmp ::= cmp GE term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpCmp("GE", c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cmp ::= cmp LE term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpCmp("LE", c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cmp ::= cmp NE term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpCmp("NE", c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cmp ::= cmp EQUAL term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpCmp("EQUAL", c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cmp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cmp",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(t, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpDiv(t, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMod(t, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= funcCall 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpFuncCall f = (ExpFuncCall)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= INT 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(v, "smpl-integer"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= DOUBLE 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(v, "smpl-double"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(c, "smpl-character"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= bool 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpLit b = (ExpLit)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= ops 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpOps o = (ExpOps)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = o; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= print 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= LPAREN MINUS expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // print ::= PRINT LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpPrint(exp); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // print ::= PRINTLN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpPrintln(exp); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ops ::= SIZE LPAREN expression RPAREN 
            {
              ExpOps RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("size", e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ops ::= CAR LPAREN expression RPAREN 
            {
              ExpOps RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("car", e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ops ::= CDR LPAREN expression RPAREN 
            {
              ExpOps RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("cdr", e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ops ::= EQV LPAREN expression COMMA expression RPAREN 
            {
              ExpOps RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("eqv", e1, e2); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ops ::= EQL LPAREN expression COMMA expression RPAREN 
            {
              ExpOps RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("equ", e1, e2); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ops ::= IS_PAIR LPAREN expression RPAREN 
            {
              ExpOps RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpOps("is-pair", e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ops",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list ::= LBRACKET argListE RBRACKET 
            {
              Exp RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpLit(aList, "smpl-list"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list ::= LIST LPAREN argListE RPAREN 
            {
              Exp RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpLit(aList, "smpl-list"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vector ::= LB_COLON argListE RB_COLON 
            {
              Exp RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new ExpLit(aList, "smpl-vector"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vector",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			ArrayList<Exp> r = new ArrayList<Exp>();
			r.add(e1);
			r.add(e2);
			RESULT = new ExpLit(r, "smpl-pair");
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pair",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SmplParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
              return CUP$SmplParser$do_action_part00000000(
                               CUP$SmplParser$act_num,
                               CUP$SmplParser$parser,
                               CUP$SmplParser$stack,
                               CUP$SmplParser$top);
    }
}

}
